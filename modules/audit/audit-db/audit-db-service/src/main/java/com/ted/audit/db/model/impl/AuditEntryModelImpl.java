/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.audit.db.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.ted.audit.db.model.AuditEntry;
import com.ted.audit.db.model.AuditEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the AuditEntry service. Represents a row in the &quot;Aud_AuditEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AuditEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AuditEntryImpl
 * @generated
 */
@ProviderType
public class AuditEntryModelImpl
	extends BaseModelImpl<AuditEntry> implements AuditEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a audit entry model instance should use the <code>AuditEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "Aud_AuditEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"auditId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"classNameId", Types.BIGINT},
		{"classPK", Types.BIGINT}, {"associationClassPK", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"actionId", Types.INTEGER}, {"extradata", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("auditId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("associationClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actionId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("extradata", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Aud_AuditEntry (auditId LONG not null primary key,companyId LONG,groupId LONG,classNameId LONG,classPK LONG,associationClassPK LONG,userId LONG,userName VARCHAR(75) null,startDate DATE null,endDate DATE null,actionId INTEGER,extradata VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Aud_AuditEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY auditEntry.startDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Aud_AuditEntry.startDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTIONID_COLUMN_BITMASK = 1L;

	public static final long CLASSNAMEID_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long STARTDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AuditEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _auditId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuditId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _auditId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AuditEntry.class;
	}

	@Override
	public String getModelClassName() {
		return AuditEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AuditEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AuditEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuditEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((AuditEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AuditEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AuditEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AuditEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AuditEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AuditEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, AuditEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			AuditEntry.class.getClassLoader(), AuditEntry.class,
			ModelWrapper.class);

		try {
			Constructor<AuditEntry> constructor =
				(Constructor<AuditEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<AuditEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AuditEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AuditEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AuditEntry, Object>>();
		Map<String, BiConsumer<AuditEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AuditEntry, ?>>();

		attributeGetterFunctions.put("auditId", AuditEntry::getAuditId);
		attributeSetterBiConsumers.put(
			"auditId", (BiConsumer<AuditEntry, Long>)AuditEntry::setAuditId);
		attributeGetterFunctions.put("companyId", AuditEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<AuditEntry, Long>)AuditEntry::setCompanyId);
		attributeGetterFunctions.put("groupId", AuditEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<AuditEntry, Long>)AuditEntry::setGroupId);
		attributeGetterFunctions.put("classNameId", AuditEntry::getClassNameId);
		attributeSetterBiConsumers.put(
			"classNameId",
			(BiConsumer<AuditEntry, Long>)AuditEntry::setClassNameId);
		attributeGetterFunctions.put("classPK", AuditEntry::getClassPK);
		attributeSetterBiConsumers.put(
			"classPK", (BiConsumer<AuditEntry, Long>)AuditEntry::setClassPK);
		attributeGetterFunctions.put(
			"associationClassPK", AuditEntry::getAssociationClassPK);
		attributeSetterBiConsumers.put(
			"associationClassPK",
			(BiConsumer<AuditEntry, Long>)AuditEntry::setAssociationClassPK);
		attributeGetterFunctions.put("userId", AuditEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<AuditEntry, Long>)AuditEntry::setUserId);
		attributeGetterFunctions.put("userName", AuditEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<AuditEntry, String>)AuditEntry::setUserName);
		attributeGetterFunctions.put("startDate", AuditEntry::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<AuditEntry, Date>)AuditEntry::setStartDate);
		attributeGetterFunctions.put("endDate", AuditEntry::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate", (BiConsumer<AuditEntry, Date>)AuditEntry::setEndDate);
		attributeGetterFunctions.put("actionId", AuditEntry::getActionId);
		attributeSetterBiConsumers.put(
			"actionId",
			(BiConsumer<AuditEntry, Integer>)AuditEntry::setActionId);
		attributeGetterFunctions.put("extradata", AuditEntry::getExtradata);
		attributeSetterBiConsumers.put(
			"extradata",
			(BiConsumer<AuditEntry, String>)AuditEntry::setExtradata);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getAuditId() {
		return _auditId;
	}

	@Override
	public void setAuditId(long auditId) {
		_auditId = auditId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@Override
	public long getAssociationClassPK() {
		return _associationClassPK;
	}

	@Override
	public void setAssociationClassPK(long associationClassPK) {
		_associationClassPK = associationClassPK;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public int getActionId() {
		return _actionId;
	}

	@Override
	public void setActionId(int actionId) {
		_columnBitmask |= ACTIONID_COLUMN_BITMASK;

		if (!_setOriginalActionId) {
			_setOriginalActionId = true;

			_originalActionId = _actionId;
		}

		_actionId = actionId;
	}

	public int getOriginalActionId() {
		return _originalActionId;
	}

	@Override
	public String getExtradata() {
		if (_extradata == null) {
			return "";
		}
		else {
			return _extradata;
		}
	}

	@Override
	public void setExtradata(String extradata) {
		_extradata = extradata;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AuditEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AuditEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AuditEntryImpl auditEntryImpl = new AuditEntryImpl();

		auditEntryImpl.setAuditId(getAuditId());
		auditEntryImpl.setCompanyId(getCompanyId());
		auditEntryImpl.setGroupId(getGroupId());
		auditEntryImpl.setClassNameId(getClassNameId());
		auditEntryImpl.setClassPK(getClassPK());
		auditEntryImpl.setAssociationClassPK(getAssociationClassPK());
		auditEntryImpl.setUserId(getUserId());
		auditEntryImpl.setUserName(getUserName());
		auditEntryImpl.setStartDate(getStartDate());
		auditEntryImpl.setEndDate(getEndDate());
		auditEntryImpl.setActionId(getActionId());
		auditEntryImpl.setExtradata(getExtradata());

		auditEntryImpl.resetOriginalValues();

		return auditEntryImpl;
	}

	@Override
	public int compareTo(AuditEntry auditEntry) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(), auditEntry.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AuditEntry)) {
			return false;
		}

		AuditEntry auditEntry = (AuditEntry)obj;

		long primaryKey = auditEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AuditEntryModelImpl auditEntryModelImpl = this;

		auditEntryModelImpl._originalCompanyId = auditEntryModelImpl._companyId;

		auditEntryModelImpl._setOriginalCompanyId = false;

		auditEntryModelImpl._originalGroupId = auditEntryModelImpl._groupId;

		auditEntryModelImpl._setOriginalGroupId = false;

		auditEntryModelImpl._originalClassNameId =
			auditEntryModelImpl._classNameId;

		auditEntryModelImpl._setOriginalClassNameId = false;

		auditEntryModelImpl._originalUserId = auditEntryModelImpl._userId;

		auditEntryModelImpl._setOriginalUserId = false;

		auditEntryModelImpl._originalActionId = auditEntryModelImpl._actionId;

		auditEntryModelImpl._setOriginalActionId = false;

		auditEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AuditEntry> toCacheModel() {
		AuditEntryCacheModel auditEntryCacheModel = new AuditEntryCacheModel();

		auditEntryCacheModel.auditId = getAuditId();

		auditEntryCacheModel.companyId = getCompanyId();

		auditEntryCacheModel.groupId = getGroupId();

		auditEntryCacheModel.classNameId = getClassNameId();

		auditEntryCacheModel.classPK = getClassPK();

		auditEntryCacheModel.associationClassPK = getAssociationClassPK();

		auditEntryCacheModel.userId = getUserId();

		auditEntryCacheModel.userName = getUserName();

		String userName = auditEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			auditEntryCacheModel.userName = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			auditEntryCacheModel.startDate = startDate.getTime();
		}
		else {
			auditEntryCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			auditEntryCacheModel.endDate = endDate.getTime();
		}
		else {
			auditEntryCacheModel.endDate = Long.MIN_VALUE;
		}

		auditEntryCacheModel.actionId = getActionId();

		auditEntryCacheModel.extradata = getExtradata();

		String extradata = auditEntryCacheModel.extradata;

		if ((extradata != null) && (extradata.length() == 0)) {
			auditEntryCacheModel.extradata = null;
		}

		return auditEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AuditEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AuditEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuditEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AuditEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AuditEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AuditEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AuditEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AuditEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, AuditEntry>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _auditId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _associationClassPK;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _startDate;
	private Date _endDate;
	private int _actionId;
	private int _originalActionId;
	private boolean _setOriginalActionId;
	private String _extradata;
	private long _columnBitmask;
	private AuditEntry _escapedModel;

}