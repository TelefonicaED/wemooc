/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.postcondition.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import com.ted.postcondition.model.PostconditionRelation;
import com.ted.postcondition.model.PostconditionRelationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PostconditionRelation service. Represents a row in the &quot;post_PostconditionRelation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PostconditionRelationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PostconditionRelationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PostconditionRelationImpl
 * @see PostconditionRelation
 * @see PostconditionRelationModel
 * @generated
 */
@ProviderType
public class PostconditionRelationModelImpl extends BaseModelImpl<PostconditionRelation>
	implements PostconditionRelationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a postcondition relation model instance should use the {@link PostconditionRelation} interface instead.
	 */
	public static final String TABLE_NAME = "post_PostconditionRelation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "postconditionRelationId", Types.BIGINT },
			{ "classNamePostconditionId", Types.BIGINT },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "extraData", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postconditionRelationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classNamePostconditionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("extraData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table post_PostconditionRelation (uuid_ VARCHAR(75) null,postconditionRelationId LONG not null primary key,classNamePostconditionId LONG,classNameId LONG,classPK LONG,extraData VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table post_PostconditionRelation";
	public static final String ORDER_BY_JPQL = " ORDER BY postconditionRelation.postconditionRelationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY post_PostconditionRelation.postconditionRelationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ted.postcondition.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ted.postcondition.model.PostconditionRelation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ted.postcondition.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ted.postcondition.model.PostconditionRelation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ted.postcondition.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ted.postcondition.model.PostconditionRelation"),
			true);
	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static final long CLASSNAMEPOSTCONDITIONID_COLUMN_BITMASK = 2L;
	public static final long CLASSPK_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long POSTCONDITIONRELATIONID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ted.postcondition.service.util.ServiceProps.get(
				"lock.expiration.time.com.ted.postcondition.model.PostconditionRelation"));

	public PostconditionRelationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _postconditionRelationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPostconditionRelationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _postconditionRelationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PostconditionRelation.class;
	}

	@Override
	public String getModelClassName() {
		return PostconditionRelation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("postconditionRelationId", getPostconditionRelationId());
		attributes.put("classNamePostconditionId", getClassNamePostconditionId());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("extraData", getExtraData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long postconditionRelationId = (Long)attributes.get(
				"postconditionRelationId");

		if (postconditionRelationId != null) {
			setPostconditionRelationId(postconditionRelationId);
		}

		Long classNamePostconditionId = (Long)attributes.get(
				"classNamePostconditionId");

		if (classNamePostconditionId != null) {
			setClassNamePostconditionId(classNamePostconditionId);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String extraData = (String)attributes.get("extraData");

		if (extraData != null) {
			setExtraData(extraData);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPostconditionRelationId() {
		return _postconditionRelationId;
	}

	@Override
	public void setPostconditionRelationId(long postconditionRelationId) {
		_postconditionRelationId = postconditionRelationId;
	}

	@Override
	public long getClassNamePostconditionId() {
		return _classNamePostconditionId;
	}

	@Override
	public void setClassNamePostconditionId(long classNamePostconditionId) {
		_columnBitmask |= CLASSNAMEPOSTCONDITIONID_COLUMN_BITMASK;

		if (!_setOriginalClassNamePostconditionId) {
			_setOriginalClassNamePostconditionId = true;

			_originalClassNamePostconditionId = _classNamePostconditionId;
		}

		_classNamePostconditionId = classNamePostconditionId;
	}

	public long getOriginalClassNamePostconditionId() {
		return _originalClassNamePostconditionId;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public String getExtraData() {
		if (_extraData == null) {
			return "";
		}
		else {
			return _extraData;
		}
	}

	@Override
	public void setExtraData(String extraData) {
		_extraData = extraData;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PostconditionRelation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PostconditionRelation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PostconditionRelation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PostconditionRelationImpl postconditionRelationImpl = new PostconditionRelationImpl();

		postconditionRelationImpl.setUuid(getUuid());
		postconditionRelationImpl.setPostconditionRelationId(getPostconditionRelationId());
		postconditionRelationImpl.setClassNamePostconditionId(getClassNamePostconditionId());
		postconditionRelationImpl.setClassNameId(getClassNameId());
		postconditionRelationImpl.setClassPK(getClassPK());
		postconditionRelationImpl.setExtraData(getExtraData());

		postconditionRelationImpl.resetOriginalValues();

		return postconditionRelationImpl;
	}

	@Override
	public int compareTo(PostconditionRelation postconditionRelation) {
		long primaryKey = postconditionRelation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PostconditionRelation)) {
			return false;
		}

		PostconditionRelation postconditionRelation = (PostconditionRelation)obj;

		long primaryKey = postconditionRelation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PostconditionRelationModelImpl postconditionRelationModelImpl = this;

		postconditionRelationModelImpl._originalUuid = postconditionRelationModelImpl._uuid;

		postconditionRelationModelImpl._originalClassNamePostconditionId = postconditionRelationModelImpl._classNamePostconditionId;

		postconditionRelationModelImpl._setOriginalClassNamePostconditionId = false;

		postconditionRelationModelImpl._originalClassNameId = postconditionRelationModelImpl._classNameId;

		postconditionRelationModelImpl._setOriginalClassNameId = false;

		postconditionRelationModelImpl._originalClassPK = postconditionRelationModelImpl._classPK;

		postconditionRelationModelImpl._setOriginalClassPK = false;

		postconditionRelationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PostconditionRelation> toCacheModel() {
		PostconditionRelationCacheModel postconditionRelationCacheModel = new PostconditionRelationCacheModel();

		postconditionRelationCacheModel.uuid = getUuid();

		String uuid = postconditionRelationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			postconditionRelationCacheModel.uuid = null;
		}

		postconditionRelationCacheModel.postconditionRelationId = getPostconditionRelationId();

		postconditionRelationCacheModel.classNamePostconditionId = getClassNamePostconditionId();

		postconditionRelationCacheModel.classNameId = getClassNameId();

		postconditionRelationCacheModel.classPK = getClassPK();

		postconditionRelationCacheModel.extraData = getExtraData();

		String extraData = postconditionRelationCacheModel.extraData;

		if ((extraData != null) && (extraData.length() == 0)) {
			postconditionRelationCacheModel.extraData = null;
		}

		return postconditionRelationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", postconditionRelationId=");
		sb.append(getPostconditionRelationId());
		sb.append(", classNamePostconditionId=");
		sb.append(getClassNamePostconditionId());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", extraData=");
		sb.append(getExtraData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.ted.postcondition.model.PostconditionRelation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postconditionRelationId</column-name><column-value><![CDATA[");
		sb.append(getPostconditionRelationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNamePostconditionId</column-name><column-value><![CDATA[");
		sb.append(getClassNamePostconditionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extraData</column-name><column-value><![CDATA[");
		sb.append(getExtraData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = PostconditionRelation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			PostconditionRelation.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _postconditionRelationId;
	private long _classNamePostconditionId;
	private long _originalClassNamePostconditionId;
	private boolean _setOriginalClassNamePostconditionId;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _extraData;
	private long _columnBitmask;
	private PostconditionRelation _escapedModel;
}