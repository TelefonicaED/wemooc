/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedGroupedModel;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the LearningActivity service. Represents a row in the &quot;LMS_LearningActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ted.lms.model.impl.LearningActivityModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ted.lms.model.impl.LearningActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LearningActivity
 * @see com.ted.lms.model.impl.LearningActivityImpl
 * @see com.ted.lms.model.impl.LearningActivityModelImpl
 * @generated
 */
@ProviderType
public interface LearningActivityModel extends BaseModel<LearningActivity>,
	LocalizedModel, ShardedModel, StagedGroupedModel, TrashedModel,
	WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a learning activity model instance should use the {@link LearningActivity} interface instead.
	 */

	/**
	 * Returns the primary key of this learning activity.
	 *
	 * @return the primary key of this learning activity
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this learning activity.
	 *
	 * @param primaryKey the primary key of this learning activity
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this learning activity.
	 *
	 * @return the uuid of this learning activity
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this learning activity.
	 *
	 * @param uuid the uuid of this learning activity
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the act ID of this learning activity.
	 *
	 * @return the act ID of this learning activity
	 */
	public long getActId();

	/**
	 * Sets the act ID of this learning activity.
	 *
	 * @param actId the act ID of this learning activity
	 */
	public void setActId(long actId);

	/**
	 * Returns the group ID of this learning activity.
	 *
	 * @return the group ID of this learning activity
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this learning activity.
	 *
	 * @param groupId the group ID of this learning activity
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this learning activity.
	 *
	 * @return the company ID of this learning activity
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this learning activity.
	 *
	 * @param companyId the company ID of this learning activity
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this learning activity.
	 *
	 * @return the user ID of this learning activity
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this learning activity.
	 *
	 * @param userId the user ID of this learning activity
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this learning activity.
	 *
	 * @return the user uuid of this learning activity
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this learning activity.
	 *
	 * @param userUuid the user uuid of this learning activity
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this learning activity.
	 *
	 * @return the user name of this learning activity
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this learning activity.
	 *
	 * @param userName the user name of this learning activity
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this learning activity.
	 *
	 * @return the create date of this learning activity
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this learning activity.
	 *
	 * @param createDate the create date of this learning activity
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this learning activity.
	 *
	 * @return the modified date of this learning activity
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this learning activity.
	 *
	 * @param modifiedDate the modified date of this learning activity
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the last publish date of this learning activity.
	 *
	 * @return the last publish date of this learning activity
	 */
	@Override
	public Date getLastPublishDate();

	/**
	 * Sets the last publish date of this learning activity.
	 *
	 * @param lastPublishDate the last publish date of this learning activity
	 */
	@Override
	public void setLastPublishDate(Date lastPublishDate);

	/**
	 * Returns the module ID of this learning activity.
	 *
	 * @return the module ID of this learning activity
	 */
	public long getModuleId();

	/**
	 * Sets the module ID of this learning activity.
	 *
	 * @param moduleId the module ID of this learning activity
	 */
	public void setModuleId(long moduleId);

	/**
	 * Returns the title of this learning activity.
	 *
	 * @return the title of this learning activity
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this learning activity
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this learning activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this learning activity
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this learning activity
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this learning activity.
	 *
	 * @return the locales and localized titles of this learning activity
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this learning activity.
	 *
	 * @param title the title of this learning activity
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this learning activity in the language.
	 *
	 * @param title the localized title of this learning activity
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this learning activity in the language, and sets the default locale.
	 *
	 * @param title the localized title of this learning activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this learning activity from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this learning activity
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this learning activity from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this learning activity
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description of this learning activity.
	 *
	 * @return the description of this learning activity
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this learning activity
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this learning activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this learning activity
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this learning activity
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this learning activity.
	 *
	 * @return the locales and localized descriptions of this learning activity
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this learning activity.
	 *
	 * @param description the description of this learning activity
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this learning activity in the language.
	 *
	 * @param description the localized description of this learning activity
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this learning activity in the language, and sets the default locale.
	 *
	 * @param description the localized description of this learning activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this learning activity from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this learning activity
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this learning activity from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this learning activity
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the type ID of this learning activity.
	 *
	 * @return the type ID of this learning activity
	 */
	public long getTypeId();

	/**
	 * Sets the type ID of this learning activity.
	 *
	 * @param typeId the type ID of this learning activity
	 */
	public void setTypeId(long typeId);

	/**
	 * Returns the start date of this learning activity.
	 *
	 * @return the start date of this learning activity
	 */
	public Date getStartDate();

	/**
	 * Sets the start date of this learning activity.
	 *
	 * @param startDate the start date of this learning activity
	 */
	public void setStartDate(Date startDate);

	/**
	 * Returns the end date of this learning activity.
	 *
	 * @return the end date of this learning activity
	 */
	public Date getEndDate();

	/**
	 * Sets the end date of this learning activity.
	 *
	 * @param endDate the end date of this learning activity
	 */
	public void setEndDate(Date endDate);

	/**
	 * Returns the tries of this learning activity.
	 *
	 * @return the tries of this learning activity
	 */
	public int getTries();

	/**
	 * Sets the tries of this learning activity.
	 *
	 * @param tries the tries of this learning activity
	 */
	public void setTries(int tries);

	/**
	 * Returns the pass puntuation of this learning activity.
	 *
	 * @return the pass puntuation of this learning activity
	 */
	public double getPassPuntuation();

	/**
	 * Sets the pass puntuation of this learning activity.
	 *
	 * @param passPuntuation the pass puntuation of this learning activity
	 */
	public void setPassPuntuation(double passPuntuation);

	/**
	 * Returns the priority of this learning activity.
	 *
	 * @return the priority of this learning activity
	 */
	public long getPriority();

	/**
	 * Sets the priority of this learning activity.
	 *
	 * @param priority the priority of this learning activity
	 */
	public void setPriority(long priority);

	/**
	 * Returns the extra content of this learning activity.
	 *
	 * @return the extra content of this learning activity
	 */
	@AutoEscape
	public String getExtraContent();

	/**
	 * Sets the extra content of this learning activity.
	 *
	 * @param extraContent the extra content of this learning activity
	 */
	public void setExtraContent(String extraContent);

	/**
	 * Returns the feedback correct of this learning activity.
	 *
	 * @return the feedback correct of this learning activity
	 */
	public String getFeedbackCorrect();

	/**
	 * Returns the localized feedback correct of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized feedback correct of this learning activity
	 */
	@AutoEscape
	public String getFeedbackCorrect(Locale locale);

	/**
	 * Returns the localized feedback correct of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized feedback correct of this learning activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFeedbackCorrect(Locale locale, boolean useDefault);

	/**
	 * Returns the localized feedback correct of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized feedback correct of this learning activity
	 */
	@AutoEscape
	public String getFeedbackCorrect(String languageId);

	/**
	 * Returns the localized feedback correct of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized feedback correct of this learning activity
	 */
	@AutoEscape
	public String getFeedbackCorrect(String languageId, boolean useDefault);

	@AutoEscape
	public String getFeedbackCorrectCurrentLanguageId();

	@AutoEscape
	public String getFeedbackCorrectCurrentValue();

	/**
	 * Returns a map of the locales and localized feedback corrects of this learning activity.
	 *
	 * @return the locales and localized feedback corrects of this learning activity
	 */
	public Map<Locale, String> getFeedbackCorrectMap();

	/**
	 * Sets the feedback correct of this learning activity.
	 *
	 * @param feedbackCorrect the feedback correct of this learning activity
	 */
	public void setFeedbackCorrect(String feedbackCorrect);

	/**
	 * Sets the localized feedback correct of this learning activity in the language.
	 *
	 * @param feedbackCorrect the localized feedback correct of this learning activity
	 * @param locale the locale of the language
	 */
	public void setFeedbackCorrect(String feedbackCorrect, Locale locale);

	/**
	 * Sets the localized feedback correct of this learning activity in the language, and sets the default locale.
	 *
	 * @param feedbackCorrect the localized feedback correct of this learning activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFeedbackCorrect(String feedbackCorrect, Locale locale,
		Locale defaultLocale);

	public void setFeedbackCorrectCurrentLanguageId(String languageId);

	/**
	 * Sets the localized feedback corrects of this learning activity from the map of locales and localized feedback corrects.
	 *
	 * @param feedbackCorrectMap the locales and localized feedback corrects of this learning activity
	 */
	public void setFeedbackCorrectMap(Map<Locale, String> feedbackCorrectMap);

	/**
	 * Sets the localized feedback corrects of this learning activity from the map of locales and localized feedback corrects, and sets the default locale.
	 *
	 * @param feedbackCorrectMap the locales and localized feedback corrects of this learning activity
	 * @param defaultLocale the default locale
	 */
	public void setFeedbackCorrectMap(Map<Locale, String> feedbackCorrectMap,
		Locale defaultLocale);

	/**
	 * Returns the feedback no correct of this learning activity.
	 *
	 * @return the feedback no correct of this learning activity
	 */
	public String getFeedbackNoCorrect();

	/**
	 * Returns the localized feedback no correct of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized feedback no correct of this learning activity
	 */
	@AutoEscape
	public String getFeedbackNoCorrect(Locale locale);

	/**
	 * Returns the localized feedback no correct of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized feedback no correct of this learning activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getFeedbackNoCorrect(Locale locale, boolean useDefault);

	/**
	 * Returns the localized feedback no correct of this learning activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized feedback no correct of this learning activity
	 */
	@AutoEscape
	public String getFeedbackNoCorrect(String languageId);

	/**
	 * Returns the localized feedback no correct of this learning activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized feedback no correct of this learning activity
	 */
	@AutoEscape
	public String getFeedbackNoCorrect(String languageId, boolean useDefault);

	@AutoEscape
	public String getFeedbackNoCorrectCurrentLanguageId();

	@AutoEscape
	public String getFeedbackNoCorrectCurrentValue();

	/**
	 * Returns a map of the locales and localized feedback no corrects of this learning activity.
	 *
	 * @return the locales and localized feedback no corrects of this learning activity
	 */
	public Map<Locale, String> getFeedbackNoCorrectMap();

	/**
	 * Sets the feedback no correct of this learning activity.
	 *
	 * @param feedbackNoCorrect the feedback no correct of this learning activity
	 */
	public void setFeedbackNoCorrect(String feedbackNoCorrect);

	/**
	 * Sets the localized feedback no correct of this learning activity in the language.
	 *
	 * @param feedbackNoCorrect the localized feedback no correct of this learning activity
	 * @param locale the locale of the language
	 */
	public void setFeedbackNoCorrect(String feedbackNoCorrect, Locale locale);

	/**
	 * Sets the localized feedback no correct of this learning activity in the language, and sets the default locale.
	 *
	 * @param feedbackNoCorrect the localized feedback no correct of this learning activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setFeedbackNoCorrect(String feedbackNoCorrect, Locale locale,
		Locale defaultLocale);

	public void setFeedbackNoCorrectCurrentLanguageId(String languageId);

	/**
	 * Sets the localized feedback no corrects of this learning activity from the map of locales and localized feedback no corrects.
	 *
	 * @param feedbackNoCorrectMap the locales and localized feedback no corrects of this learning activity
	 */
	public void setFeedbackNoCorrectMap(
		Map<Locale, String> feedbackNoCorrectMap);

	/**
	 * Sets the localized feedback no corrects of this learning activity from the map of locales and localized feedback no corrects, and sets the default locale.
	 *
	 * @param feedbackNoCorrectMap the locales and localized feedback no corrects of this learning activity
	 * @param defaultLocale the default locale
	 */
	public void setFeedbackNoCorrectMap(
		Map<Locale, String> feedbackNoCorrectMap, Locale defaultLocale);

	/**
	 * Returns the required of this learning activity.
	 *
	 * @return the required of this learning activity
	 */
	public boolean getRequired();

	/**
	 * Returns <code>true</code> if this learning activity is required.
	 *
	 * @return <code>true</code> if this learning activity is required; <code>false</code> otherwise
	 */
	public boolean isRequired();

	/**
	 * Sets whether this learning activity is required.
	 *
	 * @param required the required of this learning activity
	 */
	public void setRequired(boolean required);

	/**
	 * Returns the comments activated of this learning activity.
	 *
	 * @return the comments activated of this learning activity
	 */
	public boolean getCommentsActivated();

	/**
	 * Returns <code>true</code> if this learning activity is comments activated.
	 *
	 * @return <code>true</code> if this learning activity is comments activated; <code>false</code> otherwise
	 */
	public boolean isCommentsActivated();

	/**
	 * Sets whether this learning activity is comments activated.
	 *
	 * @param commentsActivated the comments activated of this learning activity
	 */
	public void setCommentsActivated(boolean commentsActivated);

	/**
	 * Returns the status of this learning activity.
	 *
	 * @return the status of this learning activity
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this learning activity.
	 *
	 * @param status the status of this learning activity
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this learning activity.
	 *
	 * @return the status by user ID of this learning activity
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this learning activity.
	 *
	 * @param statusByUserId the status by user ID of this learning activity
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this learning activity.
	 *
	 * @return the status by user uuid of this learning activity
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this learning activity.
	 *
	 * @param statusByUserUuid the status by user uuid of this learning activity
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this learning activity.
	 *
	 * @return the status by user name of this learning activity
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this learning activity.
	 *
	 * @param statusByUserName the status by user name of this learning activity
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this learning activity.
	 *
	 * @return the status date of this learning activity
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this learning activity.
	 *
	 * @param statusDate the status date of this learning activity
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the trash entry created when this learning activity was moved to the Recycle Bin. The trash entry may belong to one of the ancestors of this learning activity.
	 *
	 * @return the trash entry created when this learning activity was moved to the Recycle Bin
	 */
	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException;

	/**
	 * Returns the class primary key of the trash entry for this learning activity.
	 *
	 * @return the class primary key of the trash entry for this learning activity
	 */
	@Override
	public long getTrashEntryClassPK();

	/**
	 * Returns the trash handler for this learning activity.
	 *
	 * @return the trash handler for this learning activity
	 * @deprecated As of 7.0.0, with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler();

	/**
	 * Returns <code>true</code> if this learning activity is in the Recycle Bin.
	 *
	 * @return <code>true</code> if this learning activity is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrash();

	/**
	 * Returns <code>true</code> if the parent of this learning activity is in the Recycle Bin.
	 *
	 * @return <code>true</code> if the parent of this learning activity is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrashContainer();

	@Override
	public boolean isInTrashExplicitly();

	@Override
	public boolean isInTrashImplicitly();

	/**
	 * Returns <code>true</code> if this learning activity is approved.
	 *
	 * @return <code>true</code> if this learning activity is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this learning activity is denied.
	 *
	 * @return <code>true</code> if this learning activity is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this learning activity is a draft.
	 *
	 * @return <code>true</code> if this learning activity is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this learning activity is expired.
	 *
	 * @return <code>true</code> if this learning activity is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this learning activity is inactive.
	 *
	 * @return <code>true</code> if this learning activity is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this learning activity is incomplete.
	 *
	 * @return <code>true</code> if this learning activity is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this learning activity is pending.
	 *
	 * @return <code>true</code> if this learning activity is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this learning activity is scheduled.
	 *
	 * @return <code>true</code> if this learning activity is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(LearningActivity learningActivity);

	@Override
	public int hashCode();

	@Override
	public CacheModel<LearningActivity> toCacheModel();

	@Override
	public LearningActivity toEscapedModel();

	@Override
	public LearningActivity toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}