/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedGroupedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Course service. Represents a row in the &quot;LMS_Course&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ted.lms.model.impl.CourseModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ted.lms.model.impl.CourseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Course
 * @see com.ted.lms.model.impl.CourseImpl
 * @see com.ted.lms.model.impl.CourseModelImpl
 * @generated
 */
@ProviderType
public interface CourseModel extends BaseModel<Course>, LocalizedModel,
	ShardedModel, StagedGroupedModel, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a course model instance should use the {@link Course} interface instead.
	 */

	/**
	 * Returns the primary key of this course.
	 *
	 * @return the primary key of this course
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this course.
	 *
	 * @param primaryKey the primary key of this course
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this course.
	 *
	 * @return the uuid of this course
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this course.
	 *
	 * @param uuid the uuid of this course
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the course ID of this course.
	 *
	 * @return the course ID of this course
	 */
	public long getCourseId();

	/**
	 * Sets the course ID of this course.
	 *
	 * @param courseId the course ID of this course
	 */
	public void setCourseId(long courseId);

	/**
	 * Returns the group ID of this course.
	 *
	 * @return the group ID of this course
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this course.
	 *
	 * @param groupId the group ID of this course
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this course.
	 *
	 * @return the company ID of this course
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this course.
	 *
	 * @param companyId the company ID of this course
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this course.
	 *
	 * @return the user ID of this course
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this course.
	 *
	 * @param userId the user ID of this course
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this course.
	 *
	 * @return the user uuid of this course
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this course.
	 *
	 * @param userUuid the user uuid of this course
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this course.
	 *
	 * @return the user name of this course
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this course.
	 *
	 * @param userName the user name of this course
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this course.
	 *
	 * @return the create date of this course
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this course.
	 *
	 * @param createDate the create date of this course
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this course.
	 *
	 * @return the modified date of this course
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this course.
	 *
	 * @param modifiedDate the modified date of this course
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the last publish date of this course.
	 *
	 * @return the last publish date of this course
	 */
	@Override
	public Date getLastPublishDate();

	/**
	 * Sets the last publish date of this course.
	 *
	 * @param lastPublishDate the last publish date of this course
	 */
	@Override
	public void setLastPublishDate(Date lastPublishDate);

	/**
	 * Returns the parent course ID of this course.
	 *
	 * @return the parent course ID of this course
	 */
	public long getParentCourseId();

	/**
	 * Sets the parent course ID of this course.
	 *
	 * @param parentCourseId the parent course ID of this course
	 */
	public void setParentCourseId(long parentCourseId);

	/**
	 * Returns the group created ID of this course.
	 *
	 * @return the group created ID of this course
	 */
	public long getGroupCreatedId();

	/**
	 * Sets the group created ID of this course.
	 *
	 * @param groupCreatedId the group created ID of this course
	 */
	public void setGroupCreatedId(long groupCreatedId);

	/**
	 * Returns the title of this course.
	 *
	 * @return the title of this course
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this course
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this course
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this course
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this course.
	 *
	 * @return the locales and localized titles of this course
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this course.
	 *
	 * @param title the title of this course
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this course in the language.
	 *
	 * @param title the localized title of this course
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this course in the language, and sets the default locale.
	 *
	 * @param title the localized title of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this course from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this course
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this course from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this course
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description of this course.
	 *
	 * @return the description of this course
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this course
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this course
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this course
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this course.
	 *
	 * @return the locales and localized descriptions of this course
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this course.
	 *
	 * @param description the description of this course
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this course in the language.
	 *
	 * @param description the localized description of this course
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this course in the language, and sets the default locale.
	 *
	 * @param description the localized description of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this course from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this course
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this course from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this course
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the small image ID of this course.
	 *
	 * @return the small image ID of this course
	 */
	public long getSmallImageId();

	/**
	 * Sets the small image ID of this course.
	 *
	 * @param smallImageId the small image ID of this course
	 */
	public void setSmallImageId(long smallImageId);

	/**
	 * Returns the registration start date of this course.
	 *
	 * @return the registration start date of this course
	 */
	public Date getRegistrationStartDate();

	/**
	 * Sets the registration start date of this course.
	 *
	 * @param registrationStartDate the registration start date of this course
	 */
	public void setRegistrationStartDate(Date registrationStartDate);

	/**
	 * Returns the registration end date of this course.
	 *
	 * @return the registration end date of this course
	 */
	public Date getRegistrationEndDate();

	/**
	 * Sets the registration end date of this course.
	 *
	 * @param registrationEndDate the registration end date of this course
	 */
	public void setRegistrationEndDate(Date registrationEndDate);

	/**
	 * Returns the execution start date of this course.
	 *
	 * @return the execution start date of this course
	 */
	public Date getExecutionStartDate();

	/**
	 * Sets the execution start date of this course.
	 *
	 * @param executionStartDate the execution start date of this course
	 */
	public void setExecutionStartDate(Date executionStartDate);

	/**
	 * Returns the execution end date of this course.
	 *
	 * @return the execution end date of this course
	 */
	public Date getExecutionEndDate();

	/**
	 * Sets the execution end date of this course.
	 *
	 * @param executionEndDate the execution end date of this course
	 */
	public void setExecutionEndDate(Date executionEndDate);

	/**
	 * Returns the max users of this course.
	 *
	 * @return the max users of this course
	 */
	public int getMaxUsers();

	/**
	 * Sets the max users of this course.
	 *
	 * @param maxUsers the max users of this course
	 */
	public void setMaxUsers(int maxUsers);

	/**
	 * Returns the inscription type of this course.
	 *
	 * @return the inscription type of this course
	 */
	public long getInscriptionType();

	/**
	 * Sets the inscription type of this course.
	 *
	 * @param inscriptionType the inscription type of this course
	 */
	public void setInscriptionType(long inscriptionType);

	/**
	 * Returns the course eval ID of this course.
	 *
	 * @return the course eval ID of this course
	 */
	public long getCourseEvalId();

	/**
	 * Sets the course eval ID of this course.
	 *
	 * @param courseEvalId the course eval ID of this course
	 */
	public void setCourseEvalId(long courseEvalId);

	/**
	 * Returns the calification type of this course.
	 *
	 * @return the calification type of this course
	 */
	public long getCalificationType();

	/**
	 * Sets the calification type of this course.
	 *
	 * @param calificationType the calification type of this course
	 */
	public void setCalificationType(long calificationType);

	/**
	 * Returns the welcome of this course.
	 *
	 * @return the welcome of this course
	 */
	public boolean getWelcome();

	/**
	 * Returns <code>true</code> if this course is welcome.
	 *
	 * @return <code>true</code> if this course is welcome; <code>false</code> otherwise
	 */
	public boolean isWelcome();

	/**
	 * Sets whether this course is welcome.
	 *
	 * @param welcome the welcome of this course
	 */
	public void setWelcome(boolean welcome);

	/**
	 * Returns the welcome subject of this course.
	 *
	 * @return the welcome subject of this course
	 */
	public String getWelcomeSubject();

	/**
	 * Returns the localized welcome subject of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized welcome subject of this course
	 */
	@AutoEscape
	public String getWelcomeSubject(Locale locale);

	/**
	 * Returns the localized welcome subject of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized welcome subject of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getWelcomeSubject(Locale locale, boolean useDefault);

	/**
	 * Returns the localized welcome subject of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized welcome subject of this course
	 */
	@AutoEscape
	public String getWelcomeSubject(String languageId);

	/**
	 * Returns the localized welcome subject of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized welcome subject of this course
	 */
	@AutoEscape
	public String getWelcomeSubject(String languageId, boolean useDefault);

	@AutoEscape
	public String getWelcomeSubjectCurrentLanguageId();

	@AutoEscape
	public String getWelcomeSubjectCurrentValue();

	/**
	 * Returns a map of the locales and localized welcome subjects of this course.
	 *
	 * @return the locales and localized welcome subjects of this course
	 */
	public Map<Locale, String> getWelcomeSubjectMap();

	/**
	 * Sets the welcome subject of this course.
	 *
	 * @param welcomeSubject the welcome subject of this course
	 */
	public void setWelcomeSubject(String welcomeSubject);

	/**
	 * Sets the localized welcome subject of this course in the language.
	 *
	 * @param welcomeSubject the localized welcome subject of this course
	 * @param locale the locale of the language
	 */
	public void setWelcomeSubject(String welcomeSubject, Locale locale);

	/**
	 * Sets the localized welcome subject of this course in the language, and sets the default locale.
	 *
	 * @param welcomeSubject the localized welcome subject of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setWelcomeSubject(String welcomeSubject, Locale locale,
		Locale defaultLocale);

	public void setWelcomeSubjectCurrentLanguageId(String languageId);

	/**
	 * Sets the localized welcome subjects of this course from the map of locales and localized welcome subjects.
	 *
	 * @param welcomeSubjectMap the locales and localized welcome subjects of this course
	 */
	public void setWelcomeSubjectMap(Map<Locale, String> welcomeSubjectMap);

	/**
	 * Sets the localized welcome subjects of this course from the map of locales and localized welcome subjects, and sets the default locale.
	 *
	 * @param welcomeSubjectMap the locales and localized welcome subjects of this course
	 * @param defaultLocale the default locale
	 */
	public void setWelcomeSubjectMap(Map<Locale, String> welcomeSubjectMap,
		Locale defaultLocale);

	/**
	 * Returns the welcome msg of this course.
	 *
	 * @return the welcome msg of this course
	 */
	public String getWelcomeMsg();

	/**
	 * Returns the localized welcome msg of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized welcome msg of this course
	 */
	@AutoEscape
	public String getWelcomeMsg(Locale locale);

	/**
	 * Returns the localized welcome msg of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized welcome msg of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getWelcomeMsg(Locale locale, boolean useDefault);

	/**
	 * Returns the localized welcome msg of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized welcome msg of this course
	 */
	@AutoEscape
	public String getWelcomeMsg(String languageId);

	/**
	 * Returns the localized welcome msg of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized welcome msg of this course
	 */
	@AutoEscape
	public String getWelcomeMsg(String languageId, boolean useDefault);

	@AutoEscape
	public String getWelcomeMsgCurrentLanguageId();

	@AutoEscape
	public String getWelcomeMsgCurrentValue();

	/**
	 * Returns a map of the locales and localized welcome msgs of this course.
	 *
	 * @return the locales and localized welcome msgs of this course
	 */
	public Map<Locale, String> getWelcomeMsgMap();

	/**
	 * Sets the welcome msg of this course.
	 *
	 * @param welcomeMsg the welcome msg of this course
	 */
	public void setWelcomeMsg(String welcomeMsg);

	/**
	 * Sets the localized welcome msg of this course in the language.
	 *
	 * @param welcomeMsg the localized welcome msg of this course
	 * @param locale the locale of the language
	 */
	public void setWelcomeMsg(String welcomeMsg, Locale locale);

	/**
	 * Sets the localized welcome msg of this course in the language, and sets the default locale.
	 *
	 * @param welcomeMsg the localized welcome msg of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setWelcomeMsg(String welcomeMsg, Locale locale,
		Locale defaultLocale);

	public void setWelcomeMsgCurrentLanguageId(String languageId);

	/**
	 * Sets the localized welcome msgs of this course from the map of locales and localized welcome msgs.
	 *
	 * @param welcomeMsgMap the locales and localized welcome msgs of this course
	 */
	public void setWelcomeMsgMap(Map<Locale, String> welcomeMsgMap);

	/**
	 * Sets the localized welcome msgs of this course from the map of locales and localized welcome msgs, and sets the default locale.
	 *
	 * @param welcomeMsgMap the locales and localized welcome msgs of this course
	 * @param defaultLocale the default locale
	 */
	public void setWelcomeMsgMap(Map<Locale, String> welcomeMsgMap,
		Locale defaultLocale);

	/**
	 * Returns the goodbye of this course.
	 *
	 * @return the goodbye of this course
	 */
	public boolean getGoodbye();

	/**
	 * Returns <code>true</code> if this course is goodbye.
	 *
	 * @return <code>true</code> if this course is goodbye; <code>false</code> otherwise
	 */
	public boolean isGoodbye();

	/**
	 * Sets whether this course is goodbye.
	 *
	 * @param goodbye the goodbye of this course
	 */
	public void setGoodbye(boolean goodbye);

	/**
	 * Returns the goodbye subject of this course.
	 *
	 * @return the goodbye subject of this course
	 */
	public String getGoodbyeSubject();

	/**
	 * Returns the localized goodbye subject of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized goodbye subject of this course
	 */
	@AutoEscape
	public String getGoodbyeSubject(Locale locale);

	/**
	 * Returns the localized goodbye subject of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized goodbye subject of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getGoodbyeSubject(Locale locale, boolean useDefault);

	/**
	 * Returns the localized goodbye subject of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized goodbye subject of this course
	 */
	@AutoEscape
	public String getGoodbyeSubject(String languageId);

	/**
	 * Returns the localized goodbye subject of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized goodbye subject of this course
	 */
	@AutoEscape
	public String getGoodbyeSubject(String languageId, boolean useDefault);

	@AutoEscape
	public String getGoodbyeSubjectCurrentLanguageId();

	@AutoEscape
	public String getGoodbyeSubjectCurrentValue();

	/**
	 * Returns a map of the locales and localized goodbye subjects of this course.
	 *
	 * @return the locales and localized goodbye subjects of this course
	 */
	public Map<Locale, String> getGoodbyeSubjectMap();

	/**
	 * Sets the goodbye subject of this course.
	 *
	 * @param goodbyeSubject the goodbye subject of this course
	 */
	public void setGoodbyeSubject(String goodbyeSubject);

	/**
	 * Sets the localized goodbye subject of this course in the language.
	 *
	 * @param goodbyeSubject the localized goodbye subject of this course
	 * @param locale the locale of the language
	 */
	public void setGoodbyeSubject(String goodbyeSubject, Locale locale);

	/**
	 * Sets the localized goodbye subject of this course in the language, and sets the default locale.
	 *
	 * @param goodbyeSubject the localized goodbye subject of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setGoodbyeSubject(String goodbyeSubject, Locale locale,
		Locale defaultLocale);

	public void setGoodbyeSubjectCurrentLanguageId(String languageId);

	/**
	 * Sets the localized goodbye subjects of this course from the map of locales and localized goodbye subjects.
	 *
	 * @param goodbyeSubjectMap the locales and localized goodbye subjects of this course
	 */
	public void setGoodbyeSubjectMap(Map<Locale, String> goodbyeSubjectMap);

	/**
	 * Sets the localized goodbye subjects of this course from the map of locales and localized goodbye subjects, and sets the default locale.
	 *
	 * @param goodbyeSubjectMap the locales and localized goodbye subjects of this course
	 * @param defaultLocale the default locale
	 */
	public void setGoodbyeSubjectMap(Map<Locale, String> goodbyeSubjectMap,
		Locale defaultLocale);

	/**
	 * Returns the goodbye msg of this course.
	 *
	 * @return the goodbye msg of this course
	 */
	public String getGoodbyeMsg();

	/**
	 * Returns the localized goodbye msg of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized goodbye msg of this course
	 */
	@AutoEscape
	public String getGoodbyeMsg(Locale locale);

	/**
	 * Returns the localized goodbye msg of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized goodbye msg of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getGoodbyeMsg(Locale locale, boolean useDefault);

	/**
	 * Returns the localized goodbye msg of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized goodbye msg of this course
	 */
	@AutoEscape
	public String getGoodbyeMsg(String languageId);

	/**
	 * Returns the localized goodbye msg of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized goodbye msg of this course
	 */
	@AutoEscape
	public String getGoodbyeMsg(String languageId, boolean useDefault);

	@AutoEscape
	public String getGoodbyeMsgCurrentLanguageId();

	@AutoEscape
	public String getGoodbyeMsgCurrentValue();

	/**
	 * Returns a map of the locales and localized goodbye msgs of this course.
	 *
	 * @return the locales and localized goodbye msgs of this course
	 */
	public Map<Locale, String> getGoodbyeMsgMap();

	/**
	 * Sets the goodbye msg of this course.
	 *
	 * @param goodbyeMsg the goodbye msg of this course
	 */
	public void setGoodbyeMsg(String goodbyeMsg);

	/**
	 * Sets the localized goodbye msg of this course in the language.
	 *
	 * @param goodbyeMsg the localized goodbye msg of this course
	 * @param locale the locale of the language
	 */
	public void setGoodbyeMsg(String goodbyeMsg, Locale locale);

	/**
	 * Sets the localized goodbye msg of this course in the language, and sets the default locale.
	 *
	 * @param goodbyeMsg the localized goodbye msg of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setGoodbyeMsg(String goodbyeMsg, Locale locale,
		Locale defaultLocale);

	public void setGoodbyeMsgCurrentLanguageId(String languageId);

	/**
	 * Sets the localized goodbye msgs of this course from the map of locales and localized goodbye msgs.
	 *
	 * @param goodbyeMsgMap the locales and localized goodbye msgs of this course
	 */
	public void setGoodbyeMsgMap(Map<Locale, String> goodbyeMsgMap);

	/**
	 * Sets the localized goodbye msgs of this course from the map of locales and localized goodbye msgs, and sets the default locale.
	 *
	 * @param goodbyeMsgMap the locales and localized goodbye msgs of this course
	 * @param defaultLocale the default locale
	 */
	public void setGoodbyeMsgMap(Map<Locale, String> goodbyeMsgMap,
		Locale defaultLocale);

	/**
	 * Returns the denied inscription of this course.
	 *
	 * @return the denied inscription of this course
	 */
	public boolean getDeniedInscription();

	/**
	 * Returns <code>true</code> if this course is denied inscription.
	 *
	 * @return <code>true</code> if this course is denied inscription; <code>false</code> otherwise
	 */
	public boolean isDeniedInscription();

	/**
	 * Sets whether this course is denied inscription.
	 *
	 * @param deniedInscription the denied inscription of this course
	 */
	public void setDeniedInscription(boolean deniedInscription);

	/**
	 * Returns the denied inscription subject of this course.
	 *
	 * @return the denied inscription subject of this course
	 */
	public String getDeniedInscriptionSubject();

	/**
	 * Returns the localized denied inscription subject of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized denied inscription subject of this course
	 */
	@AutoEscape
	public String getDeniedInscriptionSubject(Locale locale);

	/**
	 * Returns the localized denied inscription subject of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized denied inscription subject of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDeniedInscriptionSubject(Locale locale, boolean useDefault);

	/**
	 * Returns the localized denied inscription subject of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized denied inscription subject of this course
	 */
	@AutoEscape
	public String getDeniedInscriptionSubject(String languageId);

	/**
	 * Returns the localized denied inscription subject of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized denied inscription subject of this course
	 */
	@AutoEscape
	public String getDeniedInscriptionSubject(String languageId,
		boolean useDefault);

	@AutoEscape
	public String getDeniedInscriptionSubjectCurrentLanguageId();

	@AutoEscape
	public String getDeniedInscriptionSubjectCurrentValue();

	/**
	 * Returns a map of the locales and localized denied inscription subjects of this course.
	 *
	 * @return the locales and localized denied inscription subjects of this course
	 */
	public Map<Locale, String> getDeniedInscriptionSubjectMap();

	/**
	 * Sets the denied inscription subject of this course.
	 *
	 * @param deniedInscriptionSubject the denied inscription subject of this course
	 */
	public void setDeniedInscriptionSubject(String deniedInscriptionSubject);

	/**
	 * Sets the localized denied inscription subject of this course in the language.
	 *
	 * @param deniedInscriptionSubject the localized denied inscription subject of this course
	 * @param locale the locale of the language
	 */
	public void setDeniedInscriptionSubject(String deniedInscriptionSubject,
		Locale locale);

	/**
	 * Sets the localized denied inscription subject of this course in the language, and sets the default locale.
	 *
	 * @param deniedInscriptionSubject the localized denied inscription subject of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDeniedInscriptionSubject(String deniedInscriptionSubject,
		Locale locale, Locale defaultLocale);

	public void setDeniedInscriptionSubjectCurrentLanguageId(String languageId);

	/**
	 * Sets the localized denied inscription subjects of this course from the map of locales and localized denied inscription subjects.
	 *
	 * @param deniedInscriptionSubjectMap the locales and localized denied inscription subjects of this course
	 */
	public void setDeniedInscriptionSubjectMap(
		Map<Locale, String> deniedInscriptionSubjectMap);

	/**
	 * Sets the localized denied inscription subjects of this course from the map of locales and localized denied inscription subjects, and sets the default locale.
	 *
	 * @param deniedInscriptionSubjectMap the locales and localized denied inscription subjects of this course
	 * @param defaultLocale the default locale
	 */
	public void setDeniedInscriptionSubjectMap(
		Map<Locale, String> deniedInscriptionSubjectMap, Locale defaultLocale);

	/**
	 * Returns the denied inscription msg of this course.
	 *
	 * @return the denied inscription msg of this course
	 */
	public String getDeniedInscriptionMsg();

	/**
	 * Returns the localized denied inscription msg of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized denied inscription msg of this course
	 */
	@AutoEscape
	public String getDeniedInscriptionMsg(Locale locale);

	/**
	 * Returns the localized denied inscription msg of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized denied inscription msg of this course. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDeniedInscriptionMsg(Locale locale, boolean useDefault);

	/**
	 * Returns the localized denied inscription msg of this course in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized denied inscription msg of this course
	 */
	@AutoEscape
	public String getDeniedInscriptionMsg(String languageId);

	/**
	 * Returns the localized denied inscription msg of this course in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized denied inscription msg of this course
	 */
	@AutoEscape
	public String getDeniedInscriptionMsg(String languageId, boolean useDefault);

	@AutoEscape
	public String getDeniedInscriptionMsgCurrentLanguageId();

	@AutoEscape
	public String getDeniedInscriptionMsgCurrentValue();

	/**
	 * Returns a map of the locales and localized denied inscription msgs of this course.
	 *
	 * @return the locales and localized denied inscription msgs of this course
	 */
	public Map<Locale, String> getDeniedInscriptionMsgMap();

	/**
	 * Sets the denied inscription msg of this course.
	 *
	 * @param deniedInscriptionMsg the denied inscription msg of this course
	 */
	public void setDeniedInscriptionMsg(String deniedInscriptionMsg);

	/**
	 * Sets the localized denied inscription msg of this course in the language.
	 *
	 * @param deniedInscriptionMsg the localized denied inscription msg of this course
	 * @param locale the locale of the language
	 */
	public void setDeniedInscriptionMsg(String deniedInscriptionMsg,
		Locale locale);

	/**
	 * Sets the localized denied inscription msg of this course in the language, and sets the default locale.
	 *
	 * @param deniedInscriptionMsg the localized denied inscription msg of this course
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDeniedInscriptionMsg(String deniedInscriptionMsg,
		Locale locale, Locale defaultLocale);

	public void setDeniedInscriptionMsgCurrentLanguageId(String languageId);

	/**
	 * Sets the localized denied inscription msgs of this course from the map of locales and localized denied inscription msgs.
	 *
	 * @param deniedInscriptionMsgMap the locales and localized denied inscription msgs of this course
	 */
	public void setDeniedInscriptionMsgMap(
		Map<Locale, String> deniedInscriptionMsgMap);

	/**
	 * Sets the localized denied inscription msgs of this course from the map of locales and localized denied inscription msgs, and sets the default locale.
	 *
	 * @param deniedInscriptionMsgMap the locales and localized denied inscription msgs of this course
	 * @param defaultLocale the default locale
	 */
	public void setDeniedInscriptionMsgMap(
		Map<Locale, String> deniedInscriptionMsgMap, Locale defaultLocale);

	/**
	 * Returns the course extra data of this course.
	 *
	 * @return the course extra data of this course
	 */
	@AutoEscape
	public String getCourseExtraData();

	/**
	 * Sets the course extra data of this course.
	 *
	 * @param courseExtraData the course extra data of this course
	 */
	public void setCourseExtraData(String courseExtraData);

	/**
	 * Returns the status of this course.
	 *
	 * @return the status of this course
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this course.
	 *
	 * @param status the status of this course
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this course.
	 *
	 * @return the status by user ID of this course
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this course.
	 *
	 * @param statusByUserId the status by user ID of this course
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this course.
	 *
	 * @return the status by user uuid of this course
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this course.
	 *
	 * @param statusByUserUuid the status by user uuid of this course
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this course.
	 *
	 * @return the status by user name of this course
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this course.
	 *
	 * @param statusByUserName the status by user name of this course
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this course.
	 *
	 * @return the status date of this course
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this course.
	 *
	 * @param statusDate the status date of this course
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns <code>true</code> if this course is approved.
	 *
	 * @return <code>true</code> if this course is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this course is denied.
	 *
	 * @return <code>true</code> if this course is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this course is a draft.
	 *
	 * @return <code>true</code> if this course is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this course is expired.
	 *
	 * @return <code>true</code> if this course is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this course is inactive.
	 *
	 * @return <code>true</code> if this course is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this course is incomplete.
	 *
	 * @return <code>true</code> if this course is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this course is pending.
	 *
	 * @return <code>true</code> if this course is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this course is scheduled.
	 *
	 * @return <code>true</code> if this course is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(Course course);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Course> toCacheModel();

	@Override
	public Course toEscapedModel();

	@Override
	public Course toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}