/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.learning.activity.question.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.ted.lms.learning.activity.question.model.Answer;
import com.ted.lms.learning.activity.question.model.AnswerModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Answer service. Represents a row in the &quot;QU_Answer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AnswerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AnswerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnswerImpl
 * @generated
 */
@ProviderType
public class AnswerModelImpl
	extends BaseModelImpl<Answer> implements AnswerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a answer model instance should use the <code>Answer</code> interface instead.
	 */
	public static final String TABLE_NAME = "QU_Answer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"answerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"questionId", Types.BIGINT},
		{"actId", Types.BIGINT}, {"answer", Types.CLOB},
		{"correct", Types.BOOLEAN}, {"feedbackCorrect", Types.CLOB},
		{"feedbackIncorrect", Types.CLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answer", Types.CLOB);
		TABLE_COLUMNS_MAP.put("correct", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("feedbackCorrect", Types.CLOB);
		TABLE_COLUMNS_MAP.put("feedbackIncorrect", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table QU_Answer (uuid_ VARCHAR(75) null,answerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,questionId LONG,actId LONG,answer TEXT null,correct BOOLEAN,feedbackCorrect TEXT null,feedbackIncorrect TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table QU_Answer";

	public static final String ORDER_BY_JPQL = " ORDER BY answer.answerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY QU_Answer.answerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long QUESTIONID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long ANSWERID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public AnswerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _answerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnswerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _answerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Answer.class;
	}

	@Override
	public String getModelClassName() {
		return Answer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Answer, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Answer)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Answer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Answer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Answer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Answer, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Answer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Answer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Answer.class.getClassLoader(), Answer.class, ModelWrapper.class);

		try {
			Constructor<Answer> constructor =
				(Constructor<Answer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Answer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Answer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Answer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Answer, Object>>();
		Map<String, BiConsumer<Answer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Answer, ?>>();

		attributeGetterFunctions.put("uuid", Answer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Answer, String>)Answer::setUuid);
		attributeGetterFunctions.put("answerId", Answer::getAnswerId);
		attributeSetterBiConsumers.put(
			"answerId", (BiConsumer<Answer, Long>)Answer::setAnswerId);
		attributeGetterFunctions.put("groupId", Answer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Answer, Long>)Answer::setGroupId);
		attributeGetterFunctions.put("companyId", Answer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Answer, Long>)Answer::setCompanyId);
		attributeGetterFunctions.put("userId", Answer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Answer, Long>)Answer::setUserId);
		attributeGetterFunctions.put("userName", Answer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Answer, String>)Answer::setUserName);
		attributeGetterFunctions.put("createDate", Answer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Answer, Date>)Answer::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Answer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Answer, Date>)Answer::setModifiedDate);
		attributeGetterFunctions.put(
			"lastPublishDate", Answer::getLastPublishDate);
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			(BiConsumer<Answer, Date>)Answer::setLastPublishDate);
		attributeGetterFunctions.put("questionId", Answer::getQuestionId);
		attributeSetterBiConsumers.put(
			"questionId", (BiConsumer<Answer, Long>)Answer::setQuestionId);
		attributeGetterFunctions.put("actId", Answer::getActId);
		attributeSetterBiConsumers.put(
			"actId", (BiConsumer<Answer, Long>)Answer::setActId);
		attributeGetterFunctions.put("answer", Answer::getAnswer);
		attributeSetterBiConsumers.put(
			"answer", (BiConsumer<Answer, String>)Answer::setAnswer);
		attributeGetterFunctions.put("correct", Answer::getCorrect);
		attributeSetterBiConsumers.put(
			"correct", (BiConsumer<Answer, Boolean>)Answer::setCorrect);
		attributeGetterFunctions.put(
			"feedbackCorrect", Answer::getFeedbackCorrect);
		attributeSetterBiConsumers.put(
			"feedbackCorrect",
			(BiConsumer<Answer, String>)Answer::setFeedbackCorrect);
		attributeGetterFunctions.put(
			"feedbackIncorrect", Answer::getFeedbackIncorrect);
		attributeSetterBiConsumers.put(
			"feedbackIncorrect",
			(BiConsumer<Answer, String>)Answer::setFeedbackIncorrect);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		_columnBitmask = -1L;

		_answerId = answerId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	@Override
	public long getActId() {
		return _actId;
	}

	@Override
	public void setActId(long actId) {
		_actId = actId;
	}

	@Override
	public String getAnswer() {
		if (_answer == null) {
			return "";
		}
		else {
			return _answer;
		}
	}

	@Override
	public void setAnswer(String answer) {
		_answer = answer;
	}

	@Override
	public boolean getCorrect() {
		return _correct;
	}

	@Override
	public boolean isCorrect() {
		return _correct;
	}

	@Override
	public void setCorrect(boolean correct) {
		_correct = correct;
	}

	@Override
	public String getFeedbackCorrect() {
		if (_feedbackCorrect == null) {
			return "";
		}
		else {
			return _feedbackCorrect;
		}
	}

	@Override
	public void setFeedbackCorrect(String feedbackCorrect) {
		_feedbackCorrect = feedbackCorrect;
	}

	@Override
	public String getFeedbackIncorrect() {
		if (_feedbackIncorrect == null) {
			return "";
		}
		else {
			return _feedbackIncorrect;
		}
	}

	@Override
	public void setFeedbackIncorrect(String feedbackIncorrect) {
		_feedbackIncorrect = feedbackIncorrect;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Answer.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Answer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Answer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Answer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AnswerImpl answerImpl = new AnswerImpl();

		answerImpl.setUuid(getUuid());
		answerImpl.setAnswerId(getAnswerId());
		answerImpl.setGroupId(getGroupId());
		answerImpl.setCompanyId(getCompanyId());
		answerImpl.setUserId(getUserId());
		answerImpl.setUserName(getUserName());
		answerImpl.setCreateDate(getCreateDate());
		answerImpl.setModifiedDate(getModifiedDate());
		answerImpl.setLastPublishDate(getLastPublishDate());
		answerImpl.setQuestionId(getQuestionId());
		answerImpl.setActId(getActId());
		answerImpl.setAnswer(getAnswer());
		answerImpl.setCorrect(isCorrect());
		answerImpl.setFeedbackCorrect(getFeedbackCorrect());
		answerImpl.setFeedbackIncorrect(getFeedbackIncorrect());

		answerImpl.resetOriginalValues();

		return answerImpl;
	}

	@Override
	public int compareTo(Answer answer) {
		int value = 0;

		if (getAnswerId() < answer.getAnswerId()) {
			value = -1;
		}
		else if (getAnswerId() > answer.getAnswerId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Answer)) {
			return false;
		}

		Answer answer = (Answer)obj;

		long primaryKey = answer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		AnswerModelImpl answerModelImpl = this;

		answerModelImpl._originalUuid = answerModelImpl._uuid;

		answerModelImpl._originalGroupId = answerModelImpl._groupId;

		answerModelImpl._setOriginalGroupId = false;

		answerModelImpl._originalCompanyId = answerModelImpl._companyId;

		answerModelImpl._setOriginalCompanyId = false;

		answerModelImpl._setModifiedDate = false;

		answerModelImpl._originalQuestionId = answerModelImpl._questionId;

		answerModelImpl._setOriginalQuestionId = false;

		answerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Answer> toCacheModel() {
		AnswerCacheModel answerCacheModel = new AnswerCacheModel();

		answerCacheModel.uuid = getUuid();

		String uuid = answerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			answerCacheModel.uuid = null;
		}

		answerCacheModel.answerId = getAnswerId();

		answerCacheModel.groupId = getGroupId();

		answerCacheModel.companyId = getCompanyId();

		answerCacheModel.userId = getUserId();

		answerCacheModel.userName = getUserName();

		String userName = answerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			answerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			answerCacheModel.createDate = createDate.getTime();
		}
		else {
			answerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			answerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			answerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			answerCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			answerCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		answerCacheModel.questionId = getQuestionId();

		answerCacheModel.actId = getActId();

		answerCacheModel.answer = getAnswer();

		String answer = answerCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			answerCacheModel.answer = null;
		}

		answerCacheModel.correct = isCorrect();

		answerCacheModel.feedbackCorrect = getFeedbackCorrect();

		String feedbackCorrect = answerCacheModel.feedbackCorrect;

		if ((feedbackCorrect != null) && (feedbackCorrect.length() == 0)) {
			answerCacheModel.feedbackCorrect = null;
		}

		answerCacheModel.feedbackIncorrect = getFeedbackIncorrect();

		String feedbackIncorrect = answerCacheModel.feedbackIncorrect;

		if ((feedbackIncorrect != null) && (feedbackIncorrect.length() == 0)) {
			answerCacheModel.feedbackIncorrect = null;
		}

		return answerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Answer, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Answer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Answer, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Answer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Answer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _answerId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private long _actId;
	private String _answer;
	private boolean _correct;
	private String _feedbackCorrect;
	private String _feedbackIncorrect;
	private long _columnBitmask;
	private Answer _escapedModel;

}