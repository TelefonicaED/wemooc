/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.learning.activity.p2p.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.ted.lms.learning.activity.p2p.model.P2PActivityCorrections;
import com.ted.lms.learning.activity.p2p.model.P2PActivityCorrectionsModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the P2PActivityCorrections service. Represents a row in the &quot;PTP_P2PActivityCorrections&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>P2PActivityCorrectionsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link P2PActivityCorrectionsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see P2PActivityCorrectionsImpl
 * @generated
 */
@ProviderType
public class P2PActivityCorrectionsModelImpl
	extends BaseModelImpl<P2PActivityCorrections>
	implements P2PActivityCorrectionsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p2p activity corrections model instance should use the <code>P2PActivityCorrections</code> interface instead.
	 */
	public static final String TABLE_NAME = "PTP_P2PActivityCorrections";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"p2pActivityCorrectionsId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userCreateId", Types.BIGINT}, {"userCreateName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"p2pActivityId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"actId", Types.BIGINT}, {"description", Types.VARCHAR},
		{"date_", Types.TIMESTAMP}, {"fileEntryId", Types.BIGINT},
		{"result", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("p2pActivityCorrectionsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userCreateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userCreateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("p2pActivityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PTP_P2PActivityCorrections (uuid_ VARCHAR(75) null,p2pActivityCorrectionsId LONG not null primary key,groupId LONG,companyId LONG,userCreateId LONG,userCreateName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,p2pActivityId LONG,userId LONG,actId LONG,description VARCHAR(75) null,date_ DATE null,fileEntryId LONG,result LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table PTP_P2PActivityCorrections";

	public static final String ORDER_BY_JPQL =
		" ORDER BY p2pActivityCorrections.p2pActivityCorrectionsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PTP_P2PActivityCorrections.p2pActivityCorrectionsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long P2PACTIVITYID_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long P2PACTIVITYCORRECTIONSID_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public P2PActivityCorrectionsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _p2pActivityCorrectionsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setP2pActivityCorrectionsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _p2pActivityCorrectionsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return P2PActivityCorrections.class;
	}

	@Override
	public String getModelClassName() {
		return P2PActivityCorrections.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<P2PActivityCorrections, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<P2PActivityCorrections, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<P2PActivityCorrections, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((P2PActivityCorrections)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<P2PActivityCorrections, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<P2PActivityCorrections, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(P2PActivityCorrections)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<P2PActivityCorrections, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<P2PActivityCorrections, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, P2PActivityCorrections>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			P2PActivityCorrections.class.getClassLoader(),
			P2PActivityCorrections.class, ModelWrapper.class);

		try {
			Constructor<P2PActivityCorrections> constructor =
				(Constructor<P2PActivityCorrections>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<P2PActivityCorrections, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<P2PActivityCorrections, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<P2PActivityCorrections, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<P2PActivityCorrections, Object>>();
		Map<String, BiConsumer<P2PActivityCorrections, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<P2PActivityCorrections, ?>>();

		attributeGetterFunctions.put("uuid", P2PActivityCorrections::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<P2PActivityCorrections, String>)
				P2PActivityCorrections::setUuid);
		attributeGetterFunctions.put(
			"p2pActivityCorrectionsId",
			P2PActivityCorrections::getP2pActivityCorrectionsId);
		attributeSetterBiConsumers.put(
			"p2pActivityCorrectionsId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setP2pActivityCorrectionsId);
		attributeGetterFunctions.put(
			"groupId", P2PActivityCorrections::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setGroupId);
		attributeGetterFunctions.put(
			"companyId", P2PActivityCorrections::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setCompanyId);
		attributeGetterFunctions.put(
			"userCreateId", P2PActivityCorrections::getUserCreateId);
		attributeSetterBiConsumers.put(
			"userCreateId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setUserCreateId);
		attributeGetterFunctions.put(
			"userCreateName", P2PActivityCorrections::getUserCreateName);
		attributeSetterBiConsumers.put(
			"userCreateName",
			(BiConsumer<P2PActivityCorrections, String>)
				P2PActivityCorrections::setUserCreateName);
		attributeGetterFunctions.put(
			"createDate", P2PActivityCorrections::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<P2PActivityCorrections, Date>)
				P2PActivityCorrections::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", P2PActivityCorrections::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<P2PActivityCorrections, Date>)
				P2PActivityCorrections::setModifiedDate);
		attributeGetterFunctions.put(
			"p2pActivityId", P2PActivityCorrections::getP2pActivityId);
		attributeSetterBiConsumers.put(
			"p2pActivityId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setP2pActivityId);
		attributeGetterFunctions.put(
			"userId", P2PActivityCorrections::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setUserId);
		attributeGetterFunctions.put("actId", P2PActivityCorrections::getActId);
		attributeSetterBiConsumers.put(
			"actId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setActId);
		attributeGetterFunctions.put(
			"description", P2PActivityCorrections::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<P2PActivityCorrections, String>)
				P2PActivityCorrections::setDescription);
		attributeGetterFunctions.put("date", P2PActivityCorrections::getDate);
		attributeSetterBiConsumers.put(
			"date",
			(BiConsumer<P2PActivityCorrections, Date>)
				P2PActivityCorrections::setDate);
		attributeGetterFunctions.put(
			"fileEntryId", P2PActivityCorrections::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setFileEntryId);
		attributeGetterFunctions.put(
			"result", P2PActivityCorrections::getResult);
		attributeSetterBiConsumers.put(
			"result",
			(BiConsumer<P2PActivityCorrections, Long>)
				P2PActivityCorrections::setResult);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getP2pActivityCorrectionsId() {
		return _p2pActivityCorrectionsId;
	}

	@Override
	public void setP2pActivityCorrectionsId(long p2pActivityCorrectionsId) {
		_p2pActivityCorrectionsId = p2pActivityCorrectionsId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserCreateId() {
		return _userCreateId;
	}

	@Override
	public void setUserCreateId(long userCreateId) {
		_userCreateId = userCreateId;
	}

	@Override
	public String getUserCreateName() {
		if (_userCreateName == null) {
			return "";
		}
		else {
			return _userCreateName;
		}
	}

	@Override
	public void setUserCreateName(String userCreateName) {
		_userCreateName = userCreateName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getP2pActivityId() {
		return _p2pActivityId;
	}

	@Override
	public void setP2pActivityId(long p2pActivityId) {
		_columnBitmask |= P2PACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalP2pActivityId) {
			_setOriginalP2pActivityId = true;

			_originalP2pActivityId = _p2pActivityId;
		}

		_p2pActivityId = p2pActivityId;
	}

	public long getOriginalP2pActivityId() {
		return _originalP2pActivityId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getActId() {
		return _actId;
	}

	@Override
	public void setActId(long actId) {
		_columnBitmask |= ACTID_COLUMN_BITMASK;

		if (!_setOriginalActId) {
			_setOriginalActId = true;

			_originalActId = _actId;
		}

		_actId = actId;
	}

	public long getOriginalActId() {
		return _originalActId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public long getResult() {
		return _result;
	}

	@Override
	public void setResult(long result) {
		_result = result;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(P2PActivityCorrections.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), P2PActivityCorrections.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public P2PActivityCorrections toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		P2PActivityCorrectionsImpl p2pActivityCorrectionsImpl =
			new P2PActivityCorrectionsImpl();

		p2pActivityCorrectionsImpl.setUuid(getUuid());
		p2pActivityCorrectionsImpl.setP2pActivityCorrectionsId(
			getP2pActivityCorrectionsId());
		p2pActivityCorrectionsImpl.setGroupId(getGroupId());
		p2pActivityCorrectionsImpl.setCompanyId(getCompanyId());
		p2pActivityCorrectionsImpl.setUserCreateId(getUserCreateId());
		p2pActivityCorrectionsImpl.setUserCreateName(getUserCreateName());
		p2pActivityCorrectionsImpl.setCreateDate(getCreateDate());
		p2pActivityCorrectionsImpl.setModifiedDate(getModifiedDate());
		p2pActivityCorrectionsImpl.setP2pActivityId(getP2pActivityId());
		p2pActivityCorrectionsImpl.setUserId(getUserId());
		p2pActivityCorrectionsImpl.setActId(getActId());
		p2pActivityCorrectionsImpl.setDescription(getDescription());
		p2pActivityCorrectionsImpl.setDate(getDate());
		p2pActivityCorrectionsImpl.setFileEntryId(getFileEntryId());
		p2pActivityCorrectionsImpl.setResult(getResult());

		p2pActivityCorrectionsImpl.resetOriginalValues();

		return p2pActivityCorrectionsImpl;
	}

	@Override
	public int compareTo(P2PActivityCorrections p2pActivityCorrections) {
		long primaryKey = p2pActivityCorrections.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof P2PActivityCorrections)) {
			return false;
		}

		P2PActivityCorrections p2pActivityCorrections =
			(P2PActivityCorrections)obj;

		long primaryKey = p2pActivityCorrections.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		P2PActivityCorrectionsModelImpl p2pActivityCorrectionsModelImpl = this;

		p2pActivityCorrectionsModelImpl._originalUuid =
			p2pActivityCorrectionsModelImpl._uuid;

		p2pActivityCorrectionsModelImpl._originalGroupId =
			p2pActivityCorrectionsModelImpl._groupId;

		p2pActivityCorrectionsModelImpl._setOriginalGroupId = false;

		p2pActivityCorrectionsModelImpl._originalCompanyId =
			p2pActivityCorrectionsModelImpl._companyId;

		p2pActivityCorrectionsModelImpl._setOriginalCompanyId = false;

		p2pActivityCorrectionsModelImpl._setModifiedDate = false;

		p2pActivityCorrectionsModelImpl._originalP2pActivityId =
			p2pActivityCorrectionsModelImpl._p2pActivityId;

		p2pActivityCorrectionsModelImpl._setOriginalP2pActivityId = false;

		p2pActivityCorrectionsModelImpl._originalUserId =
			p2pActivityCorrectionsModelImpl._userId;

		p2pActivityCorrectionsModelImpl._setOriginalUserId = false;

		p2pActivityCorrectionsModelImpl._originalActId =
			p2pActivityCorrectionsModelImpl._actId;

		p2pActivityCorrectionsModelImpl._setOriginalActId = false;

		p2pActivityCorrectionsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<P2PActivityCorrections> toCacheModel() {
		P2PActivityCorrectionsCacheModel p2pActivityCorrectionsCacheModel =
			new P2PActivityCorrectionsCacheModel();

		p2pActivityCorrectionsCacheModel.uuid = getUuid();

		String uuid = p2pActivityCorrectionsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			p2pActivityCorrectionsCacheModel.uuid = null;
		}

		p2pActivityCorrectionsCacheModel.p2pActivityCorrectionsId =
			getP2pActivityCorrectionsId();

		p2pActivityCorrectionsCacheModel.groupId = getGroupId();

		p2pActivityCorrectionsCacheModel.companyId = getCompanyId();

		p2pActivityCorrectionsCacheModel.userCreateId = getUserCreateId();

		p2pActivityCorrectionsCacheModel.userCreateName = getUserCreateName();

		String userCreateName = p2pActivityCorrectionsCacheModel.userCreateName;

		if ((userCreateName != null) && (userCreateName.length() == 0)) {
			p2pActivityCorrectionsCacheModel.userCreateName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			p2pActivityCorrectionsCacheModel.createDate = createDate.getTime();
		}
		else {
			p2pActivityCorrectionsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			p2pActivityCorrectionsCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			p2pActivityCorrectionsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		p2pActivityCorrectionsCacheModel.p2pActivityId = getP2pActivityId();

		p2pActivityCorrectionsCacheModel.userId = getUserId();

		p2pActivityCorrectionsCacheModel.actId = getActId();

		p2pActivityCorrectionsCacheModel.description = getDescription();

		String description = p2pActivityCorrectionsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			p2pActivityCorrectionsCacheModel.description = null;
		}

		Date date = getDate();

		if (date != null) {
			p2pActivityCorrectionsCacheModel.date = date.getTime();
		}
		else {
			p2pActivityCorrectionsCacheModel.date = Long.MIN_VALUE;
		}

		p2pActivityCorrectionsCacheModel.fileEntryId = getFileEntryId();

		p2pActivityCorrectionsCacheModel.result = getResult();

		return p2pActivityCorrectionsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<P2PActivityCorrections, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<P2PActivityCorrections, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<P2PActivityCorrections, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((P2PActivityCorrections)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<P2PActivityCorrections, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<P2PActivityCorrections, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<P2PActivityCorrections, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((P2PActivityCorrections)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, P2PActivityCorrections>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _p2pActivityCorrectionsId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userCreateId;
	private String _userCreateName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _p2pActivityId;
	private long _originalP2pActivityId;
	private boolean _setOriginalP2pActivityId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _actId;
	private long _originalActId;
	private boolean _setOriginalActId;
	private String _description;
	private Date _date;
	private long _fileEntryId;
	private long _result;
	private long _columnBitmask;
	private P2PActivityCorrections _escapedModel;

}