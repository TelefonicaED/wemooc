/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.learning.activity.p2p.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.ted.lms.learning.activity.p2p.model.P2PActivity;
import com.ted.lms.learning.activity.p2p.model.P2PActivityModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the P2PActivity service. Represents a row in the &quot;PTP_P2PActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>P2PActivityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link P2PActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see P2PActivityImpl
 * @generated
 */
@ProviderType
public class P2PActivityModelImpl
	extends BaseModelImpl<P2PActivity> implements P2PActivityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p2p activity model instance should use the <code>P2PActivity</code> interface instead.
	 */
	public static final String TABLE_NAME = "PTP_P2PActivity";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"p2pActivityId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userCreateId", Types.BIGINT}, {"userCreateName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"actId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"fileEntryId", Types.BIGINT}, {"countCorrections", Types.BIGINT},
		{"description", Types.VARCHAR}, {"date_", Types.TIMESTAMP},
		{"asignationsCompleted", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("p2pActivityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userCreateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userCreateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("countCorrections", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("asignationsCompleted", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PTP_P2PActivity (uuid_ VARCHAR(75) null,p2pActivityId LONG not null primary key,groupId LONG,companyId LONG,userCreateId LONG,userCreateName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,actId LONG,userId LONG,fileEntryId LONG,countCorrections LONG,description VARCHAR(75) null,date_ DATE null,asignationsCompleted BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table PTP_P2PActivity";

	public static final String ORDER_BY_JPQL =
		" ORDER BY p2pActivity.countCorrections ASC, p2pActivity.p2pActivityId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PTP_P2PActivity.countCorrections ASC, PTP_P2PActivity.p2pActivityId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTID_COLUMN_BITMASK = 1L;

	public static final long ASIGNATIONSCOMPLETED_COLUMN_BITMASK = 2L;

	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long COUNTCORRECTIONS_COLUMN_BITMASK = 64L;

	public static final long P2PACTIVITYID_COLUMN_BITMASK = 128L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public P2PActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _p2pActivityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setP2pActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _p2pActivityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return P2PActivity.class;
	}

	@Override
	public String getModelClassName() {
		return P2PActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<P2PActivity, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<P2PActivity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<P2PActivity, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((P2PActivity)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<P2PActivity, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<P2PActivity, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(P2PActivity)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<P2PActivity, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<P2PActivity, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, P2PActivity>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			P2PActivity.class.getClassLoader(), P2PActivity.class,
			ModelWrapper.class);

		try {
			Constructor<P2PActivity> constructor =
				(Constructor<P2PActivity>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<P2PActivity, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<P2PActivity, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<P2PActivity, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<P2PActivity, Object>>();
		Map<String, BiConsumer<P2PActivity, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<P2PActivity, ?>>();

		attributeGetterFunctions.put("uuid", P2PActivity::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<P2PActivity, String>)P2PActivity::setUuid);
		attributeGetterFunctions.put(
			"p2pActivityId", P2PActivity::getP2pActivityId);
		attributeSetterBiConsumers.put(
			"p2pActivityId",
			(BiConsumer<P2PActivity, Long>)P2PActivity::setP2pActivityId);
		attributeGetterFunctions.put("groupId", P2PActivity::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<P2PActivity, Long>)P2PActivity::setGroupId);
		attributeGetterFunctions.put("companyId", P2PActivity::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<P2PActivity, Long>)P2PActivity::setCompanyId);
		attributeGetterFunctions.put(
			"userCreateId", P2PActivity::getUserCreateId);
		attributeSetterBiConsumers.put(
			"userCreateId",
			(BiConsumer<P2PActivity, Long>)P2PActivity::setUserCreateId);
		attributeGetterFunctions.put(
			"userCreateName", P2PActivity::getUserCreateName);
		attributeSetterBiConsumers.put(
			"userCreateName",
			(BiConsumer<P2PActivity, String>)P2PActivity::setUserCreateName);
		attributeGetterFunctions.put("createDate", P2PActivity::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<P2PActivity, Date>)P2PActivity::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", P2PActivity::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<P2PActivity, Date>)P2PActivity::setModifiedDate);
		attributeGetterFunctions.put("actId", P2PActivity::getActId);
		attributeSetterBiConsumers.put(
			"actId", (BiConsumer<P2PActivity, Long>)P2PActivity::setActId);
		attributeGetterFunctions.put("userId", P2PActivity::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<P2PActivity, Long>)P2PActivity::setUserId);
		attributeGetterFunctions.put(
			"fileEntryId", P2PActivity::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<P2PActivity, Long>)P2PActivity::setFileEntryId);
		attributeGetterFunctions.put(
			"countCorrections", P2PActivity::getCountCorrections);
		attributeSetterBiConsumers.put(
			"countCorrections",
			(BiConsumer<P2PActivity, Long>)P2PActivity::setCountCorrections);
		attributeGetterFunctions.put(
			"description", P2PActivity::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<P2PActivity, String>)P2PActivity::setDescription);
		attributeGetterFunctions.put("date", P2PActivity::getDate);
		attributeSetterBiConsumers.put(
			"date", (BiConsumer<P2PActivity, Date>)P2PActivity::setDate);
		attributeGetterFunctions.put(
			"asignationsCompleted", P2PActivity::getAsignationsCompleted);
		attributeSetterBiConsumers.put(
			"asignationsCompleted",
			(BiConsumer<P2PActivity, Boolean>)
				P2PActivity::setAsignationsCompleted);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getP2pActivityId() {
		return _p2pActivityId;
	}

	@Override
	public void setP2pActivityId(long p2pActivityId) {
		_columnBitmask = -1L;

		_p2pActivityId = p2pActivityId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserCreateId() {
		return _userCreateId;
	}

	@Override
	public void setUserCreateId(long userCreateId) {
		_userCreateId = userCreateId;
	}

	@Override
	public String getUserCreateName() {
		if (_userCreateName == null) {
			return "";
		}
		else {
			return _userCreateName;
		}
	}

	@Override
	public void setUserCreateName(String userCreateName) {
		_userCreateName = userCreateName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getActId() {
		return _actId;
	}

	@Override
	public void setActId(long actId) {
		_columnBitmask |= ACTID_COLUMN_BITMASK;

		if (!_setOriginalActId) {
			_setOriginalActId = true;

			_originalActId = _actId;
		}

		_actId = actId;
	}

	public long getOriginalActId() {
		return _originalActId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public long getCountCorrections() {
		return _countCorrections;
	}

	@Override
	public void setCountCorrections(long countCorrections) {
		_columnBitmask = -1L;

		_countCorrections = countCorrections;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public boolean getAsignationsCompleted() {
		return _asignationsCompleted;
	}

	@Override
	public boolean isAsignationsCompleted() {
		return _asignationsCompleted;
	}

	@Override
	public void setAsignationsCompleted(boolean asignationsCompleted) {
		_columnBitmask |= ASIGNATIONSCOMPLETED_COLUMN_BITMASK;

		if (!_setOriginalAsignationsCompleted) {
			_setOriginalAsignationsCompleted = true;

			_originalAsignationsCompleted = _asignationsCompleted;
		}

		_asignationsCompleted = asignationsCompleted;
	}

	public boolean getOriginalAsignationsCompleted() {
		return _originalAsignationsCompleted;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(P2PActivity.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), P2PActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public P2PActivity toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, P2PActivity>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		P2PActivityImpl p2pActivityImpl = new P2PActivityImpl();

		p2pActivityImpl.setUuid(getUuid());
		p2pActivityImpl.setP2pActivityId(getP2pActivityId());
		p2pActivityImpl.setGroupId(getGroupId());
		p2pActivityImpl.setCompanyId(getCompanyId());
		p2pActivityImpl.setUserCreateId(getUserCreateId());
		p2pActivityImpl.setUserCreateName(getUserCreateName());
		p2pActivityImpl.setCreateDate(getCreateDate());
		p2pActivityImpl.setModifiedDate(getModifiedDate());
		p2pActivityImpl.setActId(getActId());
		p2pActivityImpl.setUserId(getUserId());
		p2pActivityImpl.setFileEntryId(getFileEntryId());
		p2pActivityImpl.setCountCorrections(getCountCorrections());
		p2pActivityImpl.setDescription(getDescription());
		p2pActivityImpl.setDate(getDate());
		p2pActivityImpl.setAsignationsCompleted(isAsignationsCompleted());

		p2pActivityImpl.resetOriginalValues();

		return p2pActivityImpl;
	}

	@Override
	public int compareTo(P2PActivity p2pActivity) {
		int value = 0;

		if (getCountCorrections() < p2pActivity.getCountCorrections()) {
			value = -1;
		}
		else if (getCountCorrections() > p2pActivity.getCountCorrections()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getP2pActivityId() < p2pActivity.getP2pActivityId()) {
			value = -1;
		}
		else if (getP2pActivityId() > p2pActivity.getP2pActivityId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof P2PActivity)) {
			return false;
		}

		P2PActivity p2pActivity = (P2PActivity)obj;

		long primaryKey = p2pActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		P2PActivityModelImpl p2pActivityModelImpl = this;

		p2pActivityModelImpl._originalUuid = p2pActivityModelImpl._uuid;

		p2pActivityModelImpl._originalGroupId = p2pActivityModelImpl._groupId;

		p2pActivityModelImpl._setOriginalGroupId = false;

		p2pActivityModelImpl._originalCompanyId =
			p2pActivityModelImpl._companyId;

		p2pActivityModelImpl._setOriginalCompanyId = false;

		p2pActivityModelImpl._setModifiedDate = false;

		p2pActivityModelImpl._originalActId = p2pActivityModelImpl._actId;

		p2pActivityModelImpl._setOriginalActId = false;

		p2pActivityModelImpl._originalUserId = p2pActivityModelImpl._userId;

		p2pActivityModelImpl._setOriginalUserId = false;

		p2pActivityModelImpl._originalAsignationsCompleted =
			p2pActivityModelImpl._asignationsCompleted;

		p2pActivityModelImpl._setOriginalAsignationsCompleted = false;

		p2pActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<P2PActivity> toCacheModel() {
		P2PActivityCacheModel p2pActivityCacheModel =
			new P2PActivityCacheModel();

		p2pActivityCacheModel.uuid = getUuid();

		String uuid = p2pActivityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			p2pActivityCacheModel.uuid = null;
		}

		p2pActivityCacheModel.p2pActivityId = getP2pActivityId();

		p2pActivityCacheModel.groupId = getGroupId();

		p2pActivityCacheModel.companyId = getCompanyId();

		p2pActivityCacheModel.userCreateId = getUserCreateId();

		p2pActivityCacheModel.userCreateName = getUserCreateName();

		String userCreateName = p2pActivityCacheModel.userCreateName;

		if ((userCreateName != null) && (userCreateName.length() == 0)) {
			p2pActivityCacheModel.userCreateName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			p2pActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			p2pActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			p2pActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			p2pActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		p2pActivityCacheModel.actId = getActId();

		p2pActivityCacheModel.userId = getUserId();

		p2pActivityCacheModel.fileEntryId = getFileEntryId();

		p2pActivityCacheModel.countCorrections = getCountCorrections();

		p2pActivityCacheModel.description = getDescription();

		String description = p2pActivityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			p2pActivityCacheModel.description = null;
		}

		Date date = getDate();

		if (date != null) {
			p2pActivityCacheModel.date = date.getTime();
		}
		else {
			p2pActivityCacheModel.date = Long.MIN_VALUE;
		}

		p2pActivityCacheModel.asignationsCompleted = isAsignationsCompleted();

		return p2pActivityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<P2PActivity, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<P2PActivity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<P2PActivity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((P2PActivity)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<P2PActivity, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<P2PActivity, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<P2PActivity, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((P2PActivity)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, P2PActivity>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _p2pActivityId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userCreateId;
	private String _userCreateName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _actId;
	private long _originalActId;
	private boolean _setOriginalActId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _fileEntryId;
	private long _countCorrections;
	private String _description;
	private Date _date;
	private boolean _asignationsCompleted;
	private boolean _originalAsignationsCompleted;
	private boolean _setOriginalAsignationsCompleted;
	private long _columnBitmask;
	private P2PActivity _escapedModel;

}