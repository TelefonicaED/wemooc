/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.ted.lms.model.Course;
import com.ted.lms.model.CourseModel;
import com.ted.lms.model.CourseSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Course service. Represents a row in the &quot;LMS_Course&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CourseModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CourseImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CourseModelImpl
	extends BaseModelImpl<Course> implements CourseModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course model instance should use the <code>Course</code> interface instead.
	 */
	public static final String TABLE_NAME = "LMS_Course";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"courseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"lastPublishDate", Types.TIMESTAMP}, {"parentCourseId", Types.BIGINT},
		{"groupCreatedId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"smallImageId", Types.BIGINT},
		{"registrationStartDate", Types.TIMESTAMP},
		{"registrationEndDate", Types.TIMESTAMP},
		{"executionStartDate", Types.TIMESTAMP},
		{"executionEndDate", Types.TIMESTAMP}, {"maxUsers", Types.INTEGER},
		{"inscriptionType", Types.BIGINT}, {"courseEvalId", Types.BIGINT},
		{"calificationType", Types.BIGINT}, {"welcome", Types.BOOLEAN},
		{"welcomeSubject", Types.VARCHAR}, {"welcomeMsg", Types.VARCHAR},
		{"goodbye", Types.BOOLEAN}, {"goodbyeSubject", Types.VARCHAR},
		{"goodbyeMsg", Types.VARCHAR}, {"deniedInscription", Types.BOOLEAN},
		{"deniedInscriptionSubject", Types.VARCHAR},
		{"deniedInscriptionMsg", Types.VARCHAR},
		{"courseExtraData", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("courseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("parentCourseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupCreatedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("smallImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("registrationStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("registrationEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("executionStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("executionEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("maxUsers", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("inscriptionType", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("courseEvalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("calificationType", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("welcome", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("welcomeSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("welcomeMsg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("goodbye", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("goodbyeSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("goodbyeMsg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deniedInscription", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("deniedInscriptionSubject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deniedInscriptionMsg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("courseExtraData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LMS_Course (uuid_ VARCHAR(75) null,courseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lastPublishDate DATE null,parentCourseId LONG,groupCreatedId LONG,title STRING null,description STRING null,smallImageId LONG,registrationStartDate DATE null,registrationEndDate DATE null,executionStartDate DATE null,executionEndDate DATE null,maxUsers INTEGER,inscriptionType LONG,courseEvalId LONG,calificationType LONG,welcome BOOLEAN,welcomeSubject STRING null,welcomeMsg STRING null,goodbye BOOLEAN,goodbyeSubject STRING null,goodbyeMsg STRING null,deniedInscription BOOLEAN,deniedInscriptionSubject STRING null,deniedInscriptionMsg STRING null,courseExtraData TEXT null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table LMS_Course";

	public static final String ORDER_BY_JPQL = " ORDER BY course.courseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LMS_Course.courseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPCREATEDID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long PARENTCOURSEID_COLUMN_BITMASK = 8L;

	public static final long STATUS_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long COURSEID_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Course toModel(CourseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Course model = new CourseImpl();

		model.setUuid(soapModel.getUuid());
		model.setCourseId(soapModel.getCourseId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLastPublishDate(soapModel.getLastPublishDate());
		model.setParentCourseId(soapModel.getParentCourseId());
		model.setGroupCreatedId(soapModel.getGroupCreatedId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setSmallImageId(soapModel.getSmallImageId());
		model.setRegistrationStartDate(soapModel.getRegistrationStartDate());
		model.setRegistrationEndDate(soapModel.getRegistrationEndDate());
		model.setExecutionStartDate(soapModel.getExecutionStartDate());
		model.setExecutionEndDate(soapModel.getExecutionEndDate());
		model.setMaxUsers(soapModel.getMaxUsers());
		model.setInscriptionType(soapModel.getInscriptionType());
		model.setCourseEvalId(soapModel.getCourseEvalId());
		model.setCalificationType(soapModel.getCalificationType());
		model.setWelcome(soapModel.isWelcome());
		model.setWelcomeSubject(soapModel.getWelcomeSubject());
		model.setWelcomeMsg(soapModel.getWelcomeMsg());
		model.setGoodbye(soapModel.isGoodbye());
		model.setGoodbyeSubject(soapModel.getGoodbyeSubject());
		model.setGoodbyeMsg(soapModel.getGoodbyeMsg());
		model.setDeniedInscription(soapModel.isDeniedInscription());
		model.setDeniedInscriptionSubject(
			soapModel.getDeniedInscriptionSubject());
		model.setDeniedInscriptionMsg(soapModel.getDeniedInscriptionMsg());
		model.setCourseExtraData(soapModel.getCourseExtraData());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Course> toModels(CourseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Course> models = new ArrayList<Course>(soapModels.length);

		for (CourseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _courseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCourseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _courseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Course.class;
	}

	@Override
	public String getModelClassName() {
		return Course.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Course, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Course, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Course, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Course)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Course, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Course, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Course)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Course, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Course, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Course>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Course.class.getClassLoader(), Course.class, ModelWrapper.class);

		try {
			Constructor<Course> constructor =
				(Constructor<Course>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Course, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Course, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Course, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Course, Object>>();
		Map<String, BiConsumer<Course, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Course, ?>>();

		attributeGetterFunctions.put("uuid", Course::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Course, String>)Course::setUuid);
		attributeGetterFunctions.put("courseId", Course::getCourseId);
		attributeSetterBiConsumers.put(
			"courseId", (BiConsumer<Course, Long>)Course::setCourseId);
		attributeGetterFunctions.put("groupId", Course::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Course, Long>)Course::setGroupId);
		attributeGetterFunctions.put("companyId", Course::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Course, Long>)Course::setCompanyId);
		attributeGetterFunctions.put("userId", Course::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Course, Long>)Course::setUserId);
		attributeGetterFunctions.put("userName", Course::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Course, String>)Course::setUserName);
		attributeGetterFunctions.put("createDate", Course::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Course, Date>)Course::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Course::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Course, Date>)Course::setModifiedDate);
		attributeGetterFunctions.put(
			"lastPublishDate", Course::getLastPublishDate);
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			(BiConsumer<Course, Date>)Course::setLastPublishDate);
		attributeGetterFunctions.put(
			"parentCourseId", Course::getParentCourseId);
		attributeSetterBiConsumers.put(
			"parentCourseId",
			(BiConsumer<Course, Long>)Course::setParentCourseId);
		attributeGetterFunctions.put(
			"groupCreatedId", Course::getGroupCreatedId);
		attributeSetterBiConsumers.put(
			"groupCreatedId",
			(BiConsumer<Course, Long>)Course::setGroupCreatedId);
		attributeGetterFunctions.put("title", Course::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Course, String>)Course::setTitle);
		attributeGetterFunctions.put("description", Course::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Course, String>)Course::setDescription);
		attributeGetterFunctions.put("smallImageId", Course::getSmallImageId);
		attributeSetterBiConsumers.put(
			"smallImageId", (BiConsumer<Course, Long>)Course::setSmallImageId);
		attributeGetterFunctions.put(
			"registrationStartDate", Course::getRegistrationStartDate);
		attributeSetterBiConsumers.put(
			"registrationStartDate",
			(BiConsumer<Course, Date>)Course::setRegistrationStartDate);
		attributeGetterFunctions.put(
			"registrationEndDate", Course::getRegistrationEndDate);
		attributeSetterBiConsumers.put(
			"registrationEndDate",
			(BiConsumer<Course, Date>)Course::setRegistrationEndDate);
		attributeGetterFunctions.put(
			"executionStartDate", Course::getExecutionStartDate);
		attributeSetterBiConsumers.put(
			"executionStartDate",
			(BiConsumer<Course, Date>)Course::setExecutionStartDate);
		attributeGetterFunctions.put(
			"executionEndDate", Course::getExecutionEndDate);
		attributeSetterBiConsumers.put(
			"executionEndDate",
			(BiConsumer<Course, Date>)Course::setExecutionEndDate);
		attributeGetterFunctions.put("maxUsers", Course::getMaxUsers);
		attributeSetterBiConsumers.put(
			"maxUsers", (BiConsumer<Course, Integer>)Course::setMaxUsers);
		attributeGetterFunctions.put(
			"inscriptionType", Course::getInscriptionType);
		attributeSetterBiConsumers.put(
			"inscriptionType",
			(BiConsumer<Course, Long>)Course::setInscriptionType);
		attributeGetterFunctions.put("courseEvalId", Course::getCourseEvalId);
		attributeSetterBiConsumers.put(
			"courseEvalId", (BiConsumer<Course, Long>)Course::setCourseEvalId);
		attributeGetterFunctions.put(
			"calificationType", Course::getCalificationType);
		attributeSetterBiConsumers.put(
			"calificationType",
			(BiConsumer<Course, Long>)Course::setCalificationType);
		attributeGetterFunctions.put("welcome", Course::getWelcome);
		attributeSetterBiConsumers.put(
			"welcome", (BiConsumer<Course, Boolean>)Course::setWelcome);
		attributeGetterFunctions.put(
			"welcomeSubject", Course::getWelcomeSubject);
		attributeSetterBiConsumers.put(
			"welcomeSubject",
			(BiConsumer<Course, String>)Course::setWelcomeSubject);
		attributeGetterFunctions.put("welcomeMsg", Course::getWelcomeMsg);
		attributeSetterBiConsumers.put(
			"welcomeMsg", (BiConsumer<Course, String>)Course::setWelcomeMsg);
		attributeGetterFunctions.put("goodbye", Course::getGoodbye);
		attributeSetterBiConsumers.put(
			"goodbye", (BiConsumer<Course, Boolean>)Course::setGoodbye);
		attributeGetterFunctions.put(
			"goodbyeSubject", Course::getGoodbyeSubject);
		attributeSetterBiConsumers.put(
			"goodbyeSubject",
			(BiConsumer<Course, String>)Course::setGoodbyeSubject);
		attributeGetterFunctions.put("goodbyeMsg", Course::getGoodbyeMsg);
		attributeSetterBiConsumers.put(
			"goodbyeMsg", (BiConsumer<Course, String>)Course::setGoodbyeMsg);
		attributeGetterFunctions.put(
			"deniedInscription", Course::getDeniedInscription);
		attributeSetterBiConsumers.put(
			"deniedInscription",
			(BiConsumer<Course, Boolean>)Course::setDeniedInscription);
		attributeGetterFunctions.put(
			"deniedInscriptionSubject", Course::getDeniedInscriptionSubject);
		attributeSetterBiConsumers.put(
			"deniedInscriptionSubject",
			(BiConsumer<Course, String>)Course::setDeniedInscriptionSubject);
		attributeGetterFunctions.put(
			"deniedInscriptionMsg", Course::getDeniedInscriptionMsg);
		attributeSetterBiConsumers.put(
			"deniedInscriptionMsg",
			(BiConsumer<Course, String>)Course::setDeniedInscriptionMsg);
		attributeGetterFunctions.put(
			"courseExtraData", Course::getCourseExtraData);
		attributeSetterBiConsumers.put(
			"courseExtraData",
			(BiConsumer<Course, String>)Course::setCourseExtraData);
		attributeGetterFunctions.put("status", Course::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Course, Integer>)Course::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Course::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Course, Long>)Course::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Course::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Course, String>)Course::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Course::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Course, Date>)Course::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_columnBitmask = -1L;

		_courseId = courseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	@JSON
	@Override
	public long getParentCourseId() {
		return _parentCourseId;
	}

	@Override
	public void setParentCourseId(long parentCourseId) {
		_columnBitmask |= PARENTCOURSEID_COLUMN_BITMASK;

		if (!_setOriginalParentCourseId) {
			_setOriginalParentCourseId = true;

			_originalParentCourseId = _parentCourseId;
		}

		_parentCourseId = parentCourseId;
	}

	public long getOriginalParentCourseId() {
		return _originalParentCourseId;
	}

	@JSON
	@Override
	public long getGroupCreatedId() {
		return _groupCreatedId;
	}

	@Override
	public void setGroupCreatedId(long groupCreatedId) {
		_columnBitmask |= GROUPCREATEDID_COLUMN_BITMASK;

		if (!_setOriginalGroupCreatedId) {
			_setOriginalGroupCreatedId = true;

			_originalGroupCreatedId = _groupCreatedId;
		}

		_groupCreatedId = groupCreatedId;
	}

	public long getOriginalGroupCreatedId() {
		return _originalGroupCreatedId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getSmallImageId() {
		return _smallImageId;
	}

	@Override
	public void setSmallImageId(long smallImageId) {
		_smallImageId = smallImageId;
	}

	@JSON
	@Override
	public Date getRegistrationStartDate() {
		return _registrationStartDate;
	}

	@Override
	public void setRegistrationStartDate(Date registrationStartDate) {
		_registrationStartDate = registrationStartDate;
	}

	@JSON
	@Override
	public Date getRegistrationEndDate() {
		return _registrationEndDate;
	}

	@Override
	public void setRegistrationEndDate(Date registrationEndDate) {
		_registrationEndDate = registrationEndDate;
	}

	@JSON
	@Override
	public Date getExecutionStartDate() {
		return _executionStartDate;
	}

	@Override
	public void setExecutionStartDate(Date executionStartDate) {
		_executionStartDate = executionStartDate;
	}

	@JSON
	@Override
	public Date getExecutionEndDate() {
		return _executionEndDate;
	}

	@Override
	public void setExecutionEndDate(Date executionEndDate) {
		_executionEndDate = executionEndDate;
	}

	@JSON
	@Override
	public int getMaxUsers() {
		return _maxUsers;
	}

	@Override
	public void setMaxUsers(int maxUsers) {
		_maxUsers = maxUsers;
	}

	@JSON
	@Override
	public long getInscriptionType() {
		return _inscriptionType;
	}

	@Override
	public void setInscriptionType(long inscriptionType) {
		_inscriptionType = inscriptionType;
	}

	@JSON
	@Override
	public long getCourseEvalId() {
		return _courseEvalId;
	}

	@Override
	public void setCourseEvalId(long courseEvalId) {
		_courseEvalId = courseEvalId;
	}

	@JSON
	@Override
	public long getCalificationType() {
		return _calificationType;
	}

	@Override
	public void setCalificationType(long calificationType) {
		_calificationType = calificationType;
	}

	@JSON
	@Override
	public boolean getWelcome() {
		return _welcome;
	}

	@JSON
	@Override
	public boolean isWelcome() {
		return _welcome;
	}

	@Override
	public void setWelcome(boolean welcome) {
		_welcome = welcome;
	}

	@JSON
	@Override
	public String getWelcomeSubject() {
		if (_welcomeSubject == null) {
			return "";
		}
		else {
			return _welcomeSubject;
		}
	}

	@Override
	public String getWelcomeSubject(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWelcomeSubject(languageId);
	}

	@Override
	public String getWelcomeSubject(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWelcomeSubject(languageId, useDefault);
	}

	@Override
	public String getWelcomeSubject(String languageId) {
		return LocalizationUtil.getLocalization(
			getWelcomeSubject(), languageId);
	}

	@Override
	public String getWelcomeSubject(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getWelcomeSubject(), languageId, useDefault);
	}

	@Override
	public String getWelcomeSubjectCurrentLanguageId() {
		return _welcomeSubjectCurrentLanguageId;
	}

	@JSON
	@Override
	public String getWelcomeSubjectCurrentValue() {
		Locale locale = getLocale(_welcomeSubjectCurrentLanguageId);

		return getWelcomeSubject(locale);
	}

	@Override
	public Map<Locale, String> getWelcomeSubjectMap() {
		return LocalizationUtil.getLocalizationMap(getWelcomeSubject());
	}

	@Override
	public void setWelcomeSubject(String welcomeSubject) {
		_welcomeSubject = welcomeSubject;
	}

	@Override
	public void setWelcomeSubject(String welcomeSubject, Locale locale) {
		setWelcomeSubject(welcomeSubject, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWelcomeSubject(
		String welcomeSubject, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(welcomeSubject)) {
			setWelcomeSubject(
				LocalizationUtil.updateLocalization(
					getWelcomeSubject(), "WelcomeSubject", welcomeSubject,
					languageId, defaultLanguageId));
		}
		else {
			setWelcomeSubject(
				LocalizationUtil.removeLocalization(
					getWelcomeSubject(), "WelcomeSubject", languageId));
		}
	}

	@Override
	public void setWelcomeSubjectCurrentLanguageId(String languageId) {
		_welcomeSubjectCurrentLanguageId = languageId;
	}

	@Override
	public void setWelcomeSubjectMap(Map<Locale, String> welcomeSubjectMap) {
		setWelcomeSubjectMap(welcomeSubjectMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWelcomeSubjectMap(
		Map<Locale, String> welcomeSubjectMap, Locale defaultLocale) {

		if (welcomeSubjectMap == null) {
			return;
		}

		setWelcomeSubject(
			LocalizationUtil.updateLocalization(
				welcomeSubjectMap, getWelcomeSubject(), "WelcomeSubject",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getWelcomeMsg() {
		if (_welcomeMsg == null) {
			return "";
		}
		else {
			return _welcomeMsg;
		}
	}

	@Override
	public String getWelcomeMsg(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWelcomeMsg(languageId);
	}

	@Override
	public String getWelcomeMsg(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getWelcomeMsg(languageId, useDefault);
	}

	@Override
	public String getWelcomeMsg(String languageId) {
		return LocalizationUtil.getLocalization(getWelcomeMsg(), languageId);
	}

	@Override
	public String getWelcomeMsg(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getWelcomeMsg(), languageId, useDefault);
	}

	@Override
	public String getWelcomeMsgCurrentLanguageId() {
		return _welcomeMsgCurrentLanguageId;
	}

	@JSON
	@Override
	public String getWelcomeMsgCurrentValue() {
		Locale locale = getLocale(_welcomeMsgCurrentLanguageId);

		return getWelcomeMsg(locale);
	}

	@Override
	public Map<Locale, String> getWelcomeMsgMap() {
		return LocalizationUtil.getLocalizationMap(getWelcomeMsg());
	}

	@Override
	public void setWelcomeMsg(String welcomeMsg) {
		_welcomeMsg = welcomeMsg;
	}

	@Override
	public void setWelcomeMsg(String welcomeMsg, Locale locale) {
		setWelcomeMsg(welcomeMsg, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWelcomeMsg(
		String welcomeMsg, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(welcomeMsg)) {
			setWelcomeMsg(
				LocalizationUtil.updateLocalization(
					getWelcomeMsg(), "WelcomeMsg", welcomeMsg, languageId,
					defaultLanguageId));
		}
		else {
			setWelcomeMsg(
				LocalizationUtil.removeLocalization(
					getWelcomeMsg(), "WelcomeMsg", languageId));
		}
	}

	@Override
	public void setWelcomeMsgCurrentLanguageId(String languageId) {
		_welcomeMsgCurrentLanguageId = languageId;
	}

	@Override
	public void setWelcomeMsgMap(Map<Locale, String> welcomeMsgMap) {
		setWelcomeMsgMap(welcomeMsgMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setWelcomeMsgMap(
		Map<Locale, String> welcomeMsgMap, Locale defaultLocale) {

		if (welcomeMsgMap == null) {
			return;
		}

		setWelcomeMsg(
			LocalizationUtil.updateLocalization(
				welcomeMsgMap, getWelcomeMsg(), "WelcomeMsg",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getGoodbye() {
		return _goodbye;
	}

	@JSON
	@Override
	public boolean isGoodbye() {
		return _goodbye;
	}

	@Override
	public void setGoodbye(boolean goodbye) {
		_goodbye = goodbye;
	}

	@JSON
	@Override
	public String getGoodbyeSubject() {
		if (_goodbyeSubject == null) {
			return "";
		}
		else {
			return _goodbyeSubject;
		}
	}

	@Override
	public String getGoodbyeSubject(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getGoodbyeSubject(languageId);
	}

	@Override
	public String getGoodbyeSubject(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getGoodbyeSubject(languageId, useDefault);
	}

	@Override
	public String getGoodbyeSubject(String languageId) {
		return LocalizationUtil.getLocalization(
			getGoodbyeSubject(), languageId);
	}

	@Override
	public String getGoodbyeSubject(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getGoodbyeSubject(), languageId, useDefault);
	}

	@Override
	public String getGoodbyeSubjectCurrentLanguageId() {
		return _goodbyeSubjectCurrentLanguageId;
	}

	@JSON
	@Override
	public String getGoodbyeSubjectCurrentValue() {
		Locale locale = getLocale(_goodbyeSubjectCurrentLanguageId);

		return getGoodbyeSubject(locale);
	}

	@Override
	public Map<Locale, String> getGoodbyeSubjectMap() {
		return LocalizationUtil.getLocalizationMap(getGoodbyeSubject());
	}

	@Override
	public void setGoodbyeSubject(String goodbyeSubject) {
		_goodbyeSubject = goodbyeSubject;
	}

	@Override
	public void setGoodbyeSubject(String goodbyeSubject, Locale locale) {
		setGoodbyeSubject(goodbyeSubject, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setGoodbyeSubject(
		String goodbyeSubject, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(goodbyeSubject)) {
			setGoodbyeSubject(
				LocalizationUtil.updateLocalization(
					getGoodbyeSubject(), "GoodbyeSubject", goodbyeSubject,
					languageId, defaultLanguageId));
		}
		else {
			setGoodbyeSubject(
				LocalizationUtil.removeLocalization(
					getGoodbyeSubject(), "GoodbyeSubject", languageId));
		}
	}

	@Override
	public void setGoodbyeSubjectCurrentLanguageId(String languageId) {
		_goodbyeSubjectCurrentLanguageId = languageId;
	}

	@Override
	public void setGoodbyeSubjectMap(Map<Locale, String> goodbyeSubjectMap) {
		setGoodbyeSubjectMap(goodbyeSubjectMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setGoodbyeSubjectMap(
		Map<Locale, String> goodbyeSubjectMap, Locale defaultLocale) {

		if (goodbyeSubjectMap == null) {
			return;
		}

		setGoodbyeSubject(
			LocalizationUtil.updateLocalization(
				goodbyeSubjectMap, getGoodbyeSubject(), "GoodbyeSubject",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getGoodbyeMsg() {
		if (_goodbyeMsg == null) {
			return "";
		}
		else {
			return _goodbyeMsg;
		}
	}

	@Override
	public String getGoodbyeMsg(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getGoodbyeMsg(languageId);
	}

	@Override
	public String getGoodbyeMsg(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getGoodbyeMsg(languageId, useDefault);
	}

	@Override
	public String getGoodbyeMsg(String languageId) {
		return LocalizationUtil.getLocalization(getGoodbyeMsg(), languageId);
	}

	@Override
	public String getGoodbyeMsg(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getGoodbyeMsg(), languageId, useDefault);
	}

	@Override
	public String getGoodbyeMsgCurrentLanguageId() {
		return _goodbyeMsgCurrentLanguageId;
	}

	@JSON
	@Override
	public String getGoodbyeMsgCurrentValue() {
		Locale locale = getLocale(_goodbyeMsgCurrentLanguageId);

		return getGoodbyeMsg(locale);
	}

	@Override
	public Map<Locale, String> getGoodbyeMsgMap() {
		return LocalizationUtil.getLocalizationMap(getGoodbyeMsg());
	}

	@Override
	public void setGoodbyeMsg(String goodbyeMsg) {
		_goodbyeMsg = goodbyeMsg;
	}

	@Override
	public void setGoodbyeMsg(String goodbyeMsg, Locale locale) {
		setGoodbyeMsg(goodbyeMsg, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setGoodbyeMsg(
		String goodbyeMsg, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(goodbyeMsg)) {
			setGoodbyeMsg(
				LocalizationUtil.updateLocalization(
					getGoodbyeMsg(), "GoodbyeMsg", goodbyeMsg, languageId,
					defaultLanguageId));
		}
		else {
			setGoodbyeMsg(
				LocalizationUtil.removeLocalization(
					getGoodbyeMsg(), "GoodbyeMsg", languageId));
		}
	}

	@Override
	public void setGoodbyeMsgCurrentLanguageId(String languageId) {
		_goodbyeMsgCurrentLanguageId = languageId;
	}

	@Override
	public void setGoodbyeMsgMap(Map<Locale, String> goodbyeMsgMap) {
		setGoodbyeMsgMap(goodbyeMsgMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setGoodbyeMsgMap(
		Map<Locale, String> goodbyeMsgMap, Locale defaultLocale) {

		if (goodbyeMsgMap == null) {
			return;
		}

		setGoodbyeMsg(
			LocalizationUtil.updateLocalization(
				goodbyeMsgMap, getGoodbyeMsg(), "GoodbyeMsg",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getDeniedInscription() {
		return _deniedInscription;
	}

	@JSON
	@Override
	public boolean isDeniedInscription() {
		return _deniedInscription;
	}

	@Override
	public void setDeniedInscription(boolean deniedInscription) {
		_deniedInscription = deniedInscription;
	}

	@JSON
	@Override
	public String getDeniedInscriptionSubject() {
		if (_deniedInscriptionSubject == null) {
			return "";
		}
		else {
			return _deniedInscriptionSubject;
		}
	}

	@Override
	public String getDeniedInscriptionSubject(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeniedInscriptionSubject(languageId);
	}

	@Override
	public String getDeniedInscriptionSubject(
		Locale locale, boolean useDefault) {

		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeniedInscriptionSubject(languageId, useDefault);
	}

	@Override
	public String getDeniedInscriptionSubject(String languageId) {
		return LocalizationUtil.getLocalization(
			getDeniedInscriptionSubject(), languageId);
	}

	@Override
	public String getDeniedInscriptionSubject(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDeniedInscriptionSubject(), languageId, useDefault);
	}

	@Override
	public String getDeniedInscriptionSubjectCurrentLanguageId() {
		return _deniedInscriptionSubjectCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDeniedInscriptionSubjectCurrentValue() {
		Locale locale = getLocale(_deniedInscriptionSubjectCurrentLanguageId);

		return getDeniedInscriptionSubject(locale);
	}

	@Override
	public Map<Locale, String> getDeniedInscriptionSubjectMap() {
		return LocalizationUtil.getLocalizationMap(
			getDeniedInscriptionSubject());
	}

	@Override
	public void setDeniedInscriptionSubject(String deniedInscriptionSubject) {
		_deniedInscriptionSubject = deniedInscriptionSubject;
	}

	@Override
	public void setDeniedInscriptionSubject(
		String deniedInscriptionSubject, Locale locale) {

		setDeniedInscriptionSubject(
			deniedInscriptionSubject, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDeniedInscriptionSubject(
		String deniedInscriptionSubject, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(deniedInscriptionSubject)) {
			setDeniedInscriptionSubject(
				LocalizationUtil.updateLocalization(
					getDeniedInscriptionSubject(), "DeniedInscriptionSubject",
					deniedInscriptionSubject, languageId, defaultLanguageId));
		}
		else {
			setDeniedInscriptionSubject(
				LocalizationUtil.removeLocalization(
					getDeniedInscriptionSubject(), "DeniedInscriptionSubject",
					languageId));
		}
	}

	@Override
	public void setDeniedInscriptionSubjectCurrentLanguageId(
		String languageId) {

		_deniedInscriptionSubjectCurrentLanguageId = languageId;
	}

	@Override
	public void setDeniedInscriptionSubjectMap(
		Map<Locale, String> deniedInscriptionSubjectMap) {

		setDeniedInscriptionSubjectMap(
			deniedInscriptionSubjectMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDeniedInscriptionSubjectMap(
		Map<Locale, String> deniedInscriptionSubjectMap, Locale defaultLocale) {

		if (deniedInscriptionSubjectMap == null) {
			return;
		}

		setDeniedInscriptionSubject(
			LocalizationUtil.updateLocalization(
				deniedInscriptionSubjectMap, getDeniedInscriptionSubject(),
				"DeniedInscriptionSubject",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDeniedInscriptionMsg() {
		if (_deniedInscriptionMsg == null) {
			return "";
		}
		else {
			return _deniedInscriptionMsg;
		}
	}

	@Override
	public String getDeniedInscriptionMsg(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeniedInscriptionMsg(languageId);
	}

	@Override
	public String getDeniedInscriptionMsg(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeniedInscriptionMsg(languageId, useDefault);
	}

	@Override
	public String getDeniedInscriptionMsg(String languageId) {
		return LocalizationUtil.getLocalization(
			getDeniedInscriptionMsg(), languageId);
	}

	@Override
	public String getDeniedInscriptionMsg(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getDeniedInscriptionMsg(), languageId, useDefault);
	}

	@Override
	public String getDeniedInscriptionMsgCurrentLanguageId() {
		return _deniedInscriptionMsgCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDeniedInscriptionMsgCurrentValue() {
		Locale locale = getLocale(_deniedInscriptionMsgCurrentLanguageId);

		return getDeniedInscriptionMsg(locale);
	}

	@Override
	public Map<Locale, String> getDeniedInscriptionMsgMap() {
		return LocalizationUtil.getLocalizationMap(getDeniedInscriptionMsg());
	}

	@Override
	public void setDeniedInscriptionMsg(String deniedInscriptionMsg) {
		_deniedInscriptionMsg = deniedInscriptionMsg;
	}

	@Override
	public void setDeniedInscriptionMsg(
		String deniedInscriptionMsg, Locale locale) {

		setDeniedInscriptionMsg(
			deniedInscriptionMsg, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDeniedInscriptionMsg(
		String deniedInscriptionMsg, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(deniedInscriptionMsg)) {
			setDeniedInscriptionMsg(
				LocalizationUtil.updateLocalization(
					getDeniedInscriptionMsg(), "DeniedInscriptionMsg",
					deniedInscriptionMsg, languageId, defaultLanguageId));
		}
		else {
			setDeniedInscriptionMsg(
				LocalizationUtil.removeLocalization(
					getDeniedInscriptionMsg(), "DeniedInscriptionMsg",
					languageId));
		}
	}

	@Override
	public void setDeniedInscriptionMsgCurrentLanguageId(String languageId) {
		_deniedInscriptionMsgCurrentLanguageId = languageId;
	}

	@Override
	public void setDeniedInscriptionMsgMap(
		Map<Locale, String> deniedInscriptionMsgMap) {

		setDeniedInscriptionMsgMap(
			deniedInscriptionMsgMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDeniedInscriptionMsgMap(
		Map<Locale, String> deniedInscriptionMsgMap, Locale defaultLocale) {

		if (deniedInscriptionMsgMap == null) {
			return;
		}

		setDeniedInscriptionMsg(
			LocalizationUtil.updateLocalization(
				deniedInscriptionMsgMap, getDeniedInscriptionMsg(),
				"DeniedInscriptionMsg",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getCourseExtraData() {
		if (_courseExtraData == null) {
			return "";
		}
		else {
			return _courseExtraData;
		}
	}

	@Override
	public void setCourseExtraData(String courseExtraData) {
		_courseExtraData = courseExtraData;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Course.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Course.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> welcomeSubjectMap = getWelcomeSubjectMap();

		for (Map.Entry<Locale, String> entry : welcomeSubjectMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> welcomeMsgMap = getWelcomeMsgMap();

		for (Map.Entry<Locale, String> entry : welcomeMsgMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> goodbyeSubjectMap = getGoodbyeSubjectMap();

		for (Map.Entry<Locale, String> entry : goodbyeSubjectMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> goodbyeMsgMap = getGoodbyeMsgMap();

		for (Map.Entry<Locale, String> entry : goodbyeMsgMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> deniedInscriptionSubjectMap =
			getDeniedInscriptionSubjectMap();

		for (Map.Entry<Locale, String> entry :
				deniedInscriptionSubjectMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> deniedInscriptionMsgMap =
			getDeniedInscriptionMsgMap();

		for (Map.Entry<Locale, String> entry :
				deniedInscriptionMsgMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Course.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}

		String welcomeSubject = getWelcomeSubject(defaultLocale);

		if (Validator.isNull(welcomeSubject)) {
			setWelcomeSubject(
				getWelcomeSubject(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setWelcomeSubject(
				getWelcomeSubject(defaultLocale), defaultLocale, defaultLocale);
		}

		String welcomeMsg = getWelcomeMsg(defaultLocale);

		if (Validator.isNull(welcomeMsg)) {
			setWelcomeMsg(getWelcomeMsg(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setWelcomeMsg(
				getWelcomeMsg(defaultLocale), defaultLocale, defaultLocale);
		}

		String goodbyeSubject = getGoodbyeSubject(defaultLocale);

		if (Validator.isNull(goodbyeSubject)) {
			setGoodbyeSubject(
				getGoodbyeSubject(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setGoodbyeSubject(
				getGoodbyeSubject(defaultLocale), defaultLocale, defaultLocale);
		}

		String goodbyeMsg = getGoodbyeMsg(defaultLocale);

		if (Validator.isNull(goodbyeMsg)) {
			setGoodbyeMsg(getGoodbyeMsg(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setGoodbyeMsg(
				getGoodbyeMsg(defaultLocale), defaultLocale, defaultLocale);
		}

		String deniedInscriptionSubject = getDeniedInscriptionSubject(
			defaultLocale);

		if (Validator.isNull(deniedInscriptionSubject)) {
			setDeniedInscriptionSubject(
				getDeniedInscriptionSubject(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setDeniedInscriptionSubject(
				getDeniedInscriptionSubject(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String deniedInscriptionMsg = getDeniedInscriptionMsg(defaultLocale);

		if (Validator.isNull(deniedInscriptionMsg)) {
			setDeniedInscriptionMsg(
				getDeniedInscriptionMsg(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDeniedInscriptionMsg(
				getDeniedInscriptionMsg(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Course toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Course>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseImpl courseImpl = new CourseImpl();

		courseImpl.setUuid(getUuid());
		courseImpl.setCourseId(getCourseId());
		courseImpl.setGroupId(getGroupId());
		courseImpl.setCompanyId(getCompanyId());
		courseImpl.setUserId(getUserId());
		courseImpl.setUserName(getUserName());
		courseImpl.setCreateDate(getCreateDate());
		courseImpl.setModifiedDate(getModifiedDate());
		courseImpl.setLastPublishDate(getLastPublishDate());
		courseImpl.setParentCourseId(getParentCourseId());
		courseImpl.setGroupCreatedId(getGroupCreatedId());
		courseImpl.setTitle(getTitle());
		courseImpl.setDescription(getDescription());
		courseImpl.setSmallImageId(getSmallImageId());
		courseImpl.setRegistrationStartDate(getRegistrationStartDate());
		courseImpl.setRegistrationEndDate(getRegistrationEndDate());
		courseImpl.setExecutionStartDate(getExecutionStartDate());
		courseImpl.setExecutionEndDate(getExecutionEndDate());
		courseImpl.setMaxUsers(getMaxUsers());
		courseImpl.setInscriptionType(getInscriptionType());
		courseImpl.setCourseEvalId(getCourseEvalId());
		courseImpl.setCalificationType(getCalificationType());
		courseImpl.setWelcome(isWelcome());
		courseImpl.setWelcomeSubject(getWelcomeSubject());
		courseImpl.setWelcomeMsg(getWelcomeMsg());
		courseImpl.setGoodbye(isGoodbye());
		courseImpl.setGoodbyeSubject(getGoodbyeSubject());
		courseImpl.setGoodbyeMsg(getGoodbyeMsg());
		courseImpl.setDeniedInscription(isDeniedInscription());
		courseImpl.setDeniedInscriptionSubject(getDeniedInscriptionSubject());
		courseImpl.setDeniedInscriptionMsg(getDeniedInscriptionMsg());
		courseImpl.setCourseExtraData(getCourseExtraData());
		courseImpl.setStatus(getStatus());
		courseImpl.setStatusByUserId(getStatusByUserId());
		courseImpl.setStatusByUserName(getStatusByUserName());
		courseImpl.setStatusDate(getStatusDate());

		courseImpl.resetOriginalValues();

		return courseImpl;
	}

	@Override
	public int compareTo(Course course) {
		int value = 0;

		if (getCourseId() < course.getCourseId()) {
			value = -1;
		}
		else if (getCourseId() > course.getCourseId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Course)) {
			return false;
		}

		Course course = (Course)obj;

		long primaryKey = course.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CourseModelImpl courseModelImpl = this;

		courseModelImpl._originalUuid = courseModelImpl._uuid;

		courseModelImpl._originalGroupId = courseModelImpl._groupId;

		courseModelImpl._setOriginalGroupId = false;

		courseModelImpl._originalCompanyId = courseModelImpl._companyId;

		courseModelImpl._setOriginalCompanyId = false;

		courseModelImpl._setModifiedDate = false;

		courseModelImpl._originalParentCourseId =
			courseModelImpl._parentCourseId;

		courseModelImpl._setOriginalParentCourseId = false;

		courseModelImpl._originalGroupCreatedId =
			courseModelImpl._groupCreatedId;

		courseModelImpl._setOriginalGroupCreatedId = false;

		courseModelImpl._originalStatus = courseModelImpl._status;

		courseModelImpl._setOriginalStatus = false;

		courseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Course> toCacheModel() {
		CourseCacheModel courseCacheModel = new CourseCacheModel();

		courseCacheModel.uuid = getUuid();

		String uuid = courseCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			courseCacheModel.uuid = null;
		}

		courseCacheModel.courseId = getCourseId();

		courseCacheModel.groupId = getGroupId();

		courseCacheModel.companyId = getCompanyId();

		courseCacheModel.userId = getUserId();

		courseCacheModel.userName = getUserName();

		String userName = courseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			courseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			courseCacheModel.createDate = createDate.getTime();
		}
		else {
			courseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			courseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			courseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			courseCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			courseCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		courseCacheModel.parentCourseId = getParentCourseId();

		courseCacheModel.groupCreatedId = getGroupCreatedId();

		courseCacheModel.title = getTitle();

		String title = courseCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			courseCacheModel.title = null;
		}

		courseCacheModel.description = getDescription();

		String description = courseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			courseCacheModel.description = null;
		}

		courseCacheModel.smallImageId = getSmallImageId();

		Date registrationStartDate = getRegistrationStartDate();

		if (registrationStartDate != null) {
			courseCacheModel.registrationStartDate =
				registrationStartDate.getTime();
		}
		else {
			courseCacheModel.registrationStartDate = Long.MIN_VALUE;
		}

		Date registrationEndDate = getRegistrationEndDate();

		if (registrationEndDate != null) {
			courseCacheModel.registrationEndDate =
				registrationEndDate.getTime();
		}
		else {
			courseCacheModel.registrationEndDate = Long.MIN_VALUE;
		}

		Date executionStartDate = getExecutionStartDate();

		if (executionStartDate != null) {
			courseCacheModel.executionStartDate = executionStartDate.getTime();
		}
		else {
			courseCacheModel.executionStartDate = Long.MIN_VALUE;
		}

		Date executionEndDate = getExecutionEndDate();

		if (executionEndDate != null) {
			courseCacheModel.executionEndDate = executionEndDate.getTime();
		}
		else {
			courseCacheModel.executionEndDate = Long.MIN_VALUE;
		}

		courseCacheModel.maxUsers = getMaxUsers();

		courseCacheModel.inscriptionType = getInscriptionType();

		courseCacheModel.courseEvalId = getCourseEvalId();

		courseCacheModel.calificationType = getCalificationType();

		courseCacheModel.welcome = isWelcome();

		courseCacheModel.welcomeSubject = getWelcomeSubject();

		String welcomeSubject = courseCacheModel.welcomeSubject;

		if ((welcomeSubject != null) && (welcomeSubject.length() == 0)) {
			courseCacheModel.welcomeSubject = null;
		}

		courseCacheModel.welcomeMsg = getWelcomeMsg();

		String welcomeMsg = courseCacheModel.welcomeMsg;

		if ((welcomeMsg != null) && (welcomeMsg.length() == 0)) {
			courseCacheModel.welcomeMsg = null;
		}

		courseCacheModel.goodbye = isGoodbye();

		courseCacheModel.goodbyeSubject = getGoodbyeSubject();

		String goodbyeSubject = courseCacheModel.goodbyeSubject;

		if ((goodbyeSubject != null) && (goodbyeSubject.length() == 0)) {
			courseCacheModel.goodbyeSubject = null;
		}

		courseCacheModel.goodbyeMsg = getGoodbyeMsg();

		String goodbyeMsg = courseCacheModel.goodbyeMsg;

		if ((goodbyeMsg != null) && (goodbyeMsg.length() == 0)) {
			courseCacheModel.goodbyeMsg = null;
		}

		courseCacheModel.deniedInscription = isDeniedInscription();

		courseCacheModel.deniedInscriptionSubject =
			getDeniedInscriptionSubject();

		String deniedInscriptionSubject =
			courseCacheModel.deniedInscriptionSubject;

		if ((deniedInscriptionSubject != null) &&
			(deniedInscriptionSubject.length() == 0)) {

			courseCacheModel.deniedInscriptionSubject = null;
		}

		courseCacheModel.deniedInscriptionMsg = getDeniedInscriptionMsg();

		String deniedInscriptionMsg = courseCacheModel.deniedInscriptionMsg;

		if ((deniedInscriptionMsg != null) &&
			(deniedInscriptionMsg.length() == 0)) {

			courseCacheModel.deniedInscriptionMsg = null;
		}

		courseCacheModel.courseExtraData = getCourseExtraData();

		String courseExtraData = courseCacheModel.courseExtraData;

		if ((courseExtraData != null) && (courseExtraData.length() == 0)) {
			courseCacheModel.courseExtraData = null;
		}

		courseCacheModel.status = getStatus();

		courseCacheModel.statusByUserId = getStatusByUserId();

		courseCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = courseCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			courseCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			courseCacheModel.statusDate = statusDate.getTime();
		}
		else {
			courseCacheModel.statusDate = Long.MIN_VALUE;
		}

		return courseCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Course, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Course, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Course, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Course)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Course, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Course, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Course, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Course)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Course>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _courseId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _lastPublishDate;
	private long _parentCourseId;
	private long _originalParentCourseId;
	private boolean _setOriginalParentCourseId;
	private long _groupCreatedId;
	private long _originalGroupCreatedId;
	private boolean _setOriginalGroupCreatedId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private long _smallImageId;
	private Date _registrationStartDate;
	private Date _registrationEndDate;
	private Date _executionStartDate;
	private Date _executionEndDate;
	private int _maxUsers;
	private long _inscriptionType;
	private long _courseEvalId;
	private long _calificationType;
	private boolean _welcome;
	private String _welcomeSubject;
	private String _welcomeSubjectCurrentLanguageId;
	private String _welcomeMsg;
	private String _welcomeMsgCurrentLanguageId;
	private boolean _goodbye;
	private String _goodbyeSubject;
	private String _goodbyeSubjectCurrentLanguageId;
	private String _goodbyeMsg;
	private String _goodbyeMsgCurrentLanguageId;
	private boolean _deniedInscription;
	private String _deniedInscriptionSubject;
	private String _deniedInscriptionSubjectCurrentLanguageId;
	private String _deniedInscriptionMsg;
	private String _deniedInscriptionMsgCurrentLanguageId;
	private String _courseExtraData;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Course _escapedModel;

}