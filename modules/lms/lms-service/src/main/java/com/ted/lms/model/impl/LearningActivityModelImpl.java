/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.ted.lms.model.LearningActivity;
import com.ted.lms.model.LearningActivityModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the LearningActivity service. Represents a row in the &quot;LMS_LearningActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LearningActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LearningActivityImpl
 * @see LearningActivity
 * @see LearningActivityModel
 * @generated
 */
@ProviderType
public class LearningActivityModelImpl extends BaseModelImpl<LearningActivity>
	implements LearningActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning activity model instance should use the {@link LearningActivity} interface instead.
	 */
	public static final String TABLE_NAME = "LMS_LearningActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "actId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "moduleId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "typeId", Types.INTEGER },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "tries", Types.INTEGER },
			{ "passPuntuation", Types.INTEGER },
			{ "priority", Types.BIGINT },
			{ "extraContent", Types.VARCHAR },
			{ "feedbackCorrect", Types.VARCHAR },
			{ "feedbackNoCorrect", Types.VARCHAR },
			{ "required", Types.BOOLEAN },
			{ "commentsActivated", Types.BOOLEAN },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("moduleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tries", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("passPuntuation", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("priority", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("extraContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feedbackCorrect", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("feedbackNoCorrect", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("required", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("commentsActivated", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table LMS_LearningActivity (uuid_ VARCHAR(75) null,actId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,moduleId LONG,title STRING null,description STRING null,typeId INTEGER,startDate DATE null,endDate DATE null,tries INTEGER,passPuntuation INTEGER,priority LONG,extraContent TEXT null,feedbackCorrect VARCHAR(75) null,feedbackNoCorrect VARCHAR(75) null,required BOOLEAN,commentsActivated BOOLEAN,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table LMS_LearningActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY learningActivity.moduleId ASC, learningActivity.priority ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LMS_LearningActivity.moduleId ASC, LMS_LearningActivity.priority ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ted.lms.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ted.lms.model.LearningActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ted.lms.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ted.lms.model.LearningActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ted.lms.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ted.lms.model.LearningActivity"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long MODULEID_COLUMN_BITMASK = 4L;
	public static final long REQUIRED_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long PRIORITY_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ted.lms.service.util.ServiceProps.get(
				"lock.expiration.time.com.ted.lms.model.LearningActivity"));

	public LearningActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _actId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _actId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LearningActivity.class;
	}

	@Override
	public String getModelClassName() {
		return LearningActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("actId", getActId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("moduleId", getModuleId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("typeId", getTypeId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("tries", getTries());
		attributes.put("passPuntuation", getPassPuntuation());
		attributes.put("priority", getPriority());
		attributes.put("extraContent", getExtraContent());
		attributes.put("feedbackCorrect", getFeedbackCorrect());
		attributes.put("feedbackNoCorrect", getFeedbackNoCorrect());
		attributes.put("required", isRequired());
		attributes.put("commentsActivated", isCommentsActivated());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long actId = (Long)attributes.get("actId");

		if (actId != null) {
			setActId(actId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long moduleId = (Long)attributes.get("moduleId");

		if (moduleId != null) {
			setModuleId(moduleId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer typeId = (Integer)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer tries = (Integer)attributes.get("tries");

		if (tries != null) {
			setTries(tries);
		}

		Integer passPuntuation = (Integer)attributes.get("passPuntuation");

		if (passPuntuation != null) {
			setPassPuntuation(passPuntuation);
		}

		Long priority = (Long)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		String extraContent = (String)attributes.get("extraContent");

		if (extraContent != null) {
			setExtraContent(extraContent);
		}

		String feedbackCorrect = (String)attributes.get("feedbackCorrect");

		if (feedbackCorrect != null) {
			setFeedbackCorrect(feedbackCorrect);
		}

		String feedbackNoCorrect = (String)attributes.get("feedbackNoCorrect");

		if (feedbackNoCorrect != null) {
			setFeedbackNoCorrect(feedbackNoCorrect);
		}

		Boolean required = (Boolean)attributes.get("required");

		if (required != null) {
			setRequired(required);
		}

		Boolean commentsActivated = (Boolean)attributes.get("commentsActivated");

		if (commentsActivated != null) {
			setCommentsActivated(commentsActivated);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getActId() {
		return _actId;
	}

	@Override
	public void setActId(long actId) {
		_actId = actId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getModuleId() {
		return _moduleId;
	}

	@Override
	public void setModuleId(long moduleId) {
		_columnBitmask = -1L;

		if (!_setOriginalModuleId) {
			_setOriginalModuleId = true;

			_originalModuleId = _moduleId;
		}

		_moduleId = moduleId;
	}

	public long getOriginalModuleId() {
		return _originalModuleId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public int getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(int typeId) {
		_typeId = typeId;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public int getTries() {
		return _tries;
	}

	@Override
	public void setTries(int tries) {
		_tries = tries;
	}

	@Override
	public int getPassPuntuation() {
		return _passPuntuation;
	}

	@Override
	public void setPassPuntuation(int passPuntuation) {
		_passPuntuation = passPuntuation;
	}

	@Override
	public long getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(long priority) {
		_columnBitmask = -1L;

		_priority = priority;
	}

	@Override
	public String getExtraContent() {
		if (_extraContent == null) {
			return "";
		}
		else {
			return _extraContent;
		}
	}

	@Override
	public void setExtraContent(String extraContent) {
		_extraContent = extraContent;
	}

	@Override
	public String getFeedbackCorrect() {
		if (_feedbackCorrect == null) {
			return "";
		}
		else {
			return _feedbackCorrect;
		}
	}

	@Override
	public void setFeedbackCorrect(String feedbackCorrect) {
		_feedbackCorrect = feedbackCorrect;
	}

	@Override
	public String getFeedbackNoCorrect() {
		if (_feedbackNoCorrect == null) {
			return "";
		}
		else {
			return _feedbackNoCorrect;
		}
	}

	@Override
	public void setFeedbackNoCorrect(String feedbackNoCorrect) {
		_feedbackNoCorrect = feedbackNoCorrect;
	}

	@Override
	public boolean getRequired() {
		return _required;
	}

	@Override
	public boolean isRequired() {
		return _required;
	}

	@Override
	public void setRequired(boolean required) {
		_columnBitmask |= REQUIRED_COLUMN_BITMASK;

		if (!_setOriginalRequired) {
			_setOriginalRequired = true;

			_originalRequired = _required;
		}

		_required = required;
	}

	public boolean getOriginalRequired() {
		return _originalRequired;
	}

	@Override
	public boolean getCommentsActivated() {
		return _commentsActivated;
	}

	@Override
	public boolean isCommentsActivated() {
		return _commentsActivated;
	}

	@Override
	public void setCommentsActivated(boolean commentsActivated) {
		_commentsActivated = commentsActivated;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				LearningActivity.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LearningActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(LearningActivity.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public LearningActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LearningActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LearningActivityImpl learningActivityImpl = new LearningActivityImpl();

		learningActivityImpl.setUuid(getUuid());
		learningActivityImpl.setActId(getActId());
		learningActivityImpl.setGroupId(getGroupId());
		learningActivityImpl.setCompanyId(getCompanyId());
		learningActivityImpl.setUserId(getUserId());
		learningActivityImpl.setUserName(getUserName());
		learningActivityImpl.setCreateDate(getCreateDate());
		learningActivityImpl.setModifiedDate(getModifiedDate());
		learningActivityImpl.setModuleId(getModuleId());
		learningActivityImpl.setTitle(getTitle());
		learningActivityImpl.setDescription(getDescription());
		learningActivityImpl.setTypeId(getTypeId());
		learningActivityImpl.setStartDate(getStartDate());
		learningActivityImpl.setEndDate(getEndDate());
		learningActivityImpl.setTries(getTries());
		learningActivityImpl.setPassPuntuation(getPassPuntuation());
		learningActivityImpl.setPriority(getPriority());
		learningActivityImpl.setExtraContent(getExtraContent());
		learningActivityImpl.setFeedbackCorrect(getFeedbackCorrect());
		learningActivityImpl.setFeedbackNoCorrect(getFeedbackNoCorrect());
		learningActivityImpl.setRequired(isRequired());
		learningActivityImpl.setCommentsActivated(isCommentsActivated());
		learningActivityImpl.setStatus(getStatus());
		learningActivityImpl.setStatusByUserId(getStatusByUserId());
		learningActivityImpl.setStatusByUserName(getStatusByUserName());
		learningActivityImpl.setStatusDate(getStatusDate());

		learningActivityImpl.resetOriginalValues();

		return learningActivityImpl;
	}

	@Override
	public int compareTo(LearningActivity learningActivity) {
		int value = 0;

		if (getModuleId() < learningActivity.getModuleId()) {
			value = -1;
		}
		else if (getModuleId() > learningActivity.getModuleId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getPriority() < learningActivity.getPriority()) {
			value = -1;
		}
		else if (getPriority() > learningActivity.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LearningActivity)) {
			return false;
		}

		LearningActivity learningActivity = (LearningActivity)obj;

		long primaryKey = learningActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LearningActivityModelImpl learningActivityModelImpl = this;

		learningActivityModelImpl._originalUuid = learningActivityModelImpl._uuid;

		learningActivityModelImpl._originalGroupId = learningActivityModelImpl._groupId;

		learningActivityModelImpl._setOriginalGroupId = false;

		learningActivityModelImpl._originalCompanyId = learningActivityModelImpl._companyId;

		learningActivityModelImpl._setOriginalCompanyId = false;

		learningActivityModelImpl._setModifiedDate = false;

		learningActivityModelImpl._originalModuleId = learningActivityModelImpl._moduleId;

		learningActivityModelImpl._setOriginalModuleId = false;

		learningActivityModelImpl._originalRequired = learningActivityModelImpl._required;

		learningActivityModelImpl._setOriginalRequired = false;

		learningActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearningActivity> toCacheModel() {
		LearningActivityCacheModel learningActivityCacheModel = new LearningActivityCacheModel();

		learningActivityCacheModel.uuid = getUuid();

		String uuid = learningActivityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			learningActivityCacheModel.uuid = null;
		}

		learningActivityCacheModel.actId = getActId();

		learningActivityCacheModel.groupId = getGroupId();

		learningActivityCacheModel.companyId = getCompanyId();

		learningActivityCacheModel.userId = getUserId();

		learningActivityCacheModel.userName = getUserName();

		String userName = learningActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			learningActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			learningActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			learningActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			learningActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			learningActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.moduleId = getModuleId();

		learningActivityCacheModel.title = getTitle();

		String title = learningActivityCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			learningActivityCacheModel.title = null;
		}

		learningActivityCacheModel.description = getDescription();

		String description = learningActivityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			learningActivityCacheModel.description = null;
		}

		learningActivityCacheModel.typeId = getTypeId();

		Date startDate = getStartDate();

		if (startDate != null) {
			learningActivityCacheModel.startDate = startDate.getTime();
		}
		else {
			learningActivityCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			learningActivityCacheModel.endDate = endDate.getTime();
		}
		else {
			learningActivityCacheModel.endDate = Long.MIN_VALUE;
		}

		learningActivityCacheModel.tries = getTries();

		learningActivityCacheModel.passPuntuation = getPassPuntuation();

		learningActivityCacheModel.priority = getPriority();

		learningActivityCacheModel.extraContent = getExtraContent();

		String extraContent = learningActivityCacheModel.extraContent;

		if ((extraContent != null) && (extraContent.length() == 0)) {
			learningActivityCacheModel.extraContent = null;
		}

		learningActivityCacheModel.feedbackCorrect = getFeedbackCorrect();

		String feedbackCorrect = learningActivityCacheModel.feedbackCorrect;

		if ((feedbackCorrect != null) && (feedbackCorrect.length() == 0)) {
			learningActivityCacheModel.feedbackCorrect = null;
		}

		learningActivityCacheModel.feedbackNoCorrect = getFeedbackNoCorrect();

		String feedbackNoCorrect = learningActivityCacheModel.feedbackNoCorrect;

		if ((feedbackNoCorrect != null) && (feedbackNoCorrect.length() == 0)) {
			learningActivityCacheModel.feedbackNoCorrect = null;
		}

		learningActivityCacheModel.required = isRequired();

		learningActivityCacheModel.commentsActivated = isCommentsActivated();

		learningActivityCacheModel.status = getStatus();

		learningActivityCacheModel.statusByUserId = getStatusByUserId();

		learningActivityCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = learningActivityCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			learningActivityCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			learningActivityCacheModel.statusDate = statusDate.getTime();
		}
		else {
			learningActivityCacheModel.statusDate = Long.MIN_VALUE;
		}

		return learningActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", moduleId=");
		sb.append(getModuleId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", tries=");
		sb.append(getTries());
		sb.append(", passPuntuation=");
		sb.append(getPassPuntuation());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", extraContent=");
		sb.append(getExtraContent());
		sb.append(", feedbackCorrect=");
		sb.append(getFeedbackCorrect());
		sb.append(", feedbackNoCorrect=");
		sb.append(getFeedbackNoCorrect());
		sb.append(", required=");
		sb.append(isRequired());
		sb.append(", commentsActivated=");
		sb.append(isCommentsActivated());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append("com.ted.lms.model.LearningActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>moduleId</column-name><column-value><![CDATA[");
		sb.append(getModuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tries</column-name><column-value><![CDATA[");
		sb.append(getTries());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passPuntuation</column-name><column-value><![CDATA[");
		sb.append(getPassPuntuation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extraContent</column-name><column-value><![CDATA[");
		sb.append(getExtraContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackCorrect</column-name><column-value><![CDATA[");
		sb.append(getFeedbackCorrect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feedbackNoCorrect</column-name><column-value><![CDATA[");
		sb.append(getFeedbackNoCorrect());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>required</column-name><column-value><![CDATA[");
		sb.append(isRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsActivated</column-name><column-value><![CDATA[");
		sb.append(isCommentsActivated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LearningActivity.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LearningActivity.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _actId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _moduleId;
	private long _originalModuleId;
	private boolean _setOriginalModuleId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private int _typeId;
	private Date _startDate;
	private Date _endDate;
	private int _tries;
	private int _passPuntuation;
	private long _priority;
	private String _extraContent;
	private String _feedbackCorrect;
	private String _feedbackNoCorrect;
	private boolean _required;
	private boolean _originalRequired;
	private boolean _setOriginalRequired;
	private boolean _commentsActivated;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private LearningActivity _escapedModel;
}