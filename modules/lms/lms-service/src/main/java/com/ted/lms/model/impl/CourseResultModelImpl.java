/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.ted.lms.model.CourseResult;
import com.ted.lms.model.CourseResultModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CourseResult service. Represents a row in the &quot;LMS_CourseResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CourseResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseResultImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CourseResultImpl
 * @see CourseResult
 * @see CourseResultModel
 * @generated
 */
@ProviderType
public class CourseResultModelImpl extends BaseModelImpl<CourseResult>
	implements CourseResultModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course result model instance should use the {@link CourseResult} interface instead.
	 */
	public static final String TABLE_NAME = "LMS_CourseResult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "crId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userModifiedId", Types.BIGINT },
			{ "userModifiedName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "courseId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "result", Types.DOUBLE },
			{ "comments", Types.CLOB },
			{ "passed", Types.BOOLEAN },
			{ "registrationDate", Types.TIMESTAMP },
			{ "startDate", Types.TIMESTAMP },
			{ "passedDate", Types.TIMESTAMP },
			{ "allowStartDate", Types.TIMESTAMP },
			{ "allowEndDate", Types.TIMESTAMP },
			{ "extraData", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("crId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userModifiedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userModifiedName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("courseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("comments", Types.CLOB);
		TABLE_COLUMNS_MAP.put("passed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("registrationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("passedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("allowStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("allowEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("extraData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table LMS_CourseResult (crId LONG not null primary key,groupId LONG,companyId LONG,userModifiedId LONG,userModifiedName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,courseId LONG,userId LONG,result DOUBLE,comments TEXT null,passed BOOLEAN,registrationDate DATE null,startDate DATE null,passedDate DATE null,allowStartDate DATE null,allowEndDate DATE null,extraData TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table LMS_CourseResult";
	public static final String ORDER_BY_JPQL = " ORDER BY courseResult.crId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LMS_CourseResult.crId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ted.lms.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ted.lms.model.CourseResult"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ted.lms.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ted.lms.model.CourseResult"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ted.lms.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ted.lms.model.CourseResult"),
			true);
	public static final long COURSEID_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long CRID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ted.lms.service.util.ServiceProps.get(
				"lock.expiration.time.com.ted.lms.model.CourseResult"));

	public CourseResultModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _crId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCrId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _crId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CourseResult.class;
	}

	@Override
	public String getModelClassName() {
		return CourseResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("crId", getCrId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userModifiedId", getUserModifiedId());
		attributes.put("userModifiedName", getUserModifiedName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("courseId", getCourseId());
		attributes.put("userId", getUserId());
		attributes.put("result", getResult());
		attributes.put("comments", getComments());
		attributes.put("passed", isPassed());
		attributes.put("registrationDate", getRegistrationDate());
		attributes.put("startDate", getStartDate());
		attributes.put("passedDate", getPassedDate());
		attributes.put("allowStartDate", getAllowStartDate());
		attributes.put("allowEndDate", getAllowEndDate());
		attributes.put("extraData", getExtraData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long crId = (Long)attributes.get("crId");

		if (crId != null) {
			setCrId(crId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userModifiedId = (Long)attributes.get("userModifiedId");

		if (userModifiedId != null) {
			setUserModifiedId(userModifiedId);
		}

		String userModifiedName = (String)attributes.get("userModifiedName");

		if (userModifiedName != null) {
			setUserModifiedName(userModifiedName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Double result = (Double)attributes.get("result");

		if (result != null) {
			setResult(result);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Boolean passed = (Boolean)attributes.get("passed");

		if (passed != null) {
			setPassed(passed);
		}

		Date registrationDate = (Date)attributes.get("registrationDate");

		if (registrationDate != null) {
			setRegistrationDate(registrationDate);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date passedDate = (Date)attributes.get("passedDate");

		if (passedDate != null) {
			setPassedDate(passedDate);
		}

		Date allowStartDate = (Date)attributes.get("allowStartDate");

		if (allowStartDate != null) {
			setAllowStartDate(allowStartDate);
		}

		Date allowEndDate = (Date)attributes.get("allowEndDate");

		if (allowEndDate != null) {
			setAllowEndDate(allowEndDate);
		}

		String extraData = (String)attributes.get("extraData");

		if (extraData != null) {
			setExtraData(extraData);
		}
	}

	@Override
	public long getCrId() {
		return _crId;
	}

	@Override
	public void setCrId(long crId) {
		_crId = crId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserModifiedId() {
		return _userModifiedId;
	}

	@Override
	public void setUserModifiedId(long userModifiedId) {
		_userModifiedId = userModifiedId;
	}

	@Override
	public String getUserModifiedName() {
		if (_userModifiedName == null) {
			return "";
		}
		else {
			return _userModifiedName;
		}
	}

	@Override
	public void setUserModifiedName(String userModifiedName) {
		_userModifiedName = userModifiedName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public double getResult() {
		return _result;
	}

	@Override
	public void setResult(double result) {
		_result = result;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public boolean getPassed() {
		return _passed;
	}

	@Override
	public boolean isPassed() {
		return _passed;
	}

	@Override
	public void setPassed(boolean passed) {
		_passed = passed;
	}

	@Override
	public Date getRegistrationDate() {
		return _registrationDate;
	}

	@Override
	public void setRegistrationDate(Date registrationDate) {
		_registrationDate = registrationDate;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getPassedDate() {
		return _passedDate;
	}

	@Override
	public void setPassedDate(Date passedDate) {
		_passedDate = passedDate;
	}

	@Override
	public Date getAllowStartDate() {
		return _allowStartDate;
	}

	@Override
	public void setAllowStartDate(Date allowStartDate) {
		_allowStartDate = allowStartDate;
	}

	@Override
	public Date getAllowEndDate() {
		return _allowEndDate;
	}

	@Override
	public void setAllowEndDate(Date allowEndDate) {
		_allowEndDate = allowEndDate;
	}

	@Override
	public String getExtraData() {
		if (_extraData == null) {
			return "";
		}
		else {
			return _extraData;
		}
	}

	@Override
	public void setExtraData(String extraData) {
		_extraData = extraData;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CourseResult.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CourseResult toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CourseResult)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseResultImpl courseResultImpl = new CourseResultImpl();

		courseResultImpl.setCrId(getCrId());
		courseResultImpl.setGroupId(getGroupId());
		courseResultImpl.setCompanyId(getCompanyId());
		courseResultImpl.setUserModifiedId(getUserModifiedId());
		courseResultImpl.setUserModifiedName(getUserModifiedName());
		courseResultImpl.setCreateDate(getCreateDate());
		courseResultImpl.setModifiedDate(getModifiedDate());
		courseResultImpl.setCourseId(getCourseId());
		courseResultImpl.setUserId(getUserId());
		courseResultImpl.setResult(getResult());
		courseResultImpl.setComments(getComments());
		courseResultImpl.setPassed(isPassed());
		courseResultImpl.setRegistrationDate(getRegistrationDate());
		courseResultImpl.setStartDate(getStartDate());
		courseResultImpl.setPassedDate(getPassedDate());
		courseResultImpl.setAllowStartDate(getAllowStartDate());
		courseResultImpl.setAllowEndDate(getAllowEndDate());
		courseResultImpl.setExtraData(getExtraData());

		courseResultImpl.resetOriginalValues();

		return courseResultImpl;
	}

	@Override
	public int compareTo(CourseResult courseResult) {
		long primaryKey = courseResult.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CourseResult)) {
			return false;
		}

		CourseResult courseResult = (CourseResult)obj;

		long primaryKey = courseResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CourseResultModelImpl courseResultModelImpl = this;

		courseResultModelImpl._setModifiedDate = false;

		courseResultModelImpl._originalCourseId = courseResultModelImpl._courseId;

		courseResultModelImpl._setOriginalCourseId = false;

		courseResultModelImpl._originalUserId = courseResultModelImpl._userId;

		courseResultModelImpl._setOriginalUserId = false;

		courseResultModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseResult> toCacheModel() {
		CourseResultCacheModel courseResultCacheModel = new CourseResultCacheModel();

		courseResultCacheModel.crId = getCrId();

		courseResultCacheModel.groupId = getGroupId();

		courseResultCacheModel.companyId = getCompanyId();

		courseResultCacheModel.userModifiedId = getUserModifiedId();

		courseResultCacheModel.userModifiedName = getUserModifiedName();

		String userModifiedName = courseResultCacheModel.userModifiedName;

		if ((userModifiedName != null) && (userModifiedName.length() == 0)) {
			courseResultCacheModel.userModifiedName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			courseResultCacheModel.createDate = createDate.getTime();
		}
		else {
			courseResultCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			courseResultCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			courseResultCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		courseResultCacheModel.courseId = getCourseId();

		courseResultCacheModel.userId = getUserId();

		courseResultCacheModel.result = getResult();

		courseResultCacheModel.comments = getComments();

		String comments = courseResultCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			courseResultCacheModel.comments = null;
		}

		courseResultCacheModel.passed = isPassed();

		Date registrationDate = getRegistrationDate();

		if (registrationDate != null) {
			courseResultCacheModel.registrationDate = registrationDate.getTime();
		}
		else {
			courseResultCacheModel.registrationDate = Long.MIN_VALUE;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			courseResultCacheModel.startDate = startDate.getTime();
		}
		else {
			courseResultCacheModel.startDate = Long.MIN_VALUE;
		}

		Date passedDate = getPassedDate();

		if (passedDate != null) {
			courseResultCacheModel.passedDate = passedDate.getTime();
		}
		else {
			courseResultCacheModel.passedDate = Long.MIN_VALUE;
		}

		Date allowStartDate = getAllowStartDate();

		if (allowStartDate != null) {
			courseResultCacheModel.allowStartDate = allowStartDate.getTime();
		}
		else {
			courseResultCacheModel.allowStartDate = Long.MIN_VALUE;
		}

		Date allowEndDate = getAllowEndDate();

		if (allowEndDate != null) {
			courseResultCacheModel.allowEndDate = allowEndDate.getTime();
		}
		else {
			courseResultCacheModel.allowEndDate = Long.MIN_VALUE;
		}

		courseResultCacheModel.extraData = getExtraData();

		String extraData = courseResultCacheModel.extraData;

		if ((extraData != null) && (extraData.length() == 0)) {
			courseResultCacheModel.extraData = null;
		}

		return courseResultCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{crId=");
		sb.append(getCrId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userModifiedId=");
		sb.append(getUserModifiedId());
		sb.append(", userModifiedName=");
		sb.append(getUserModifiedName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", result=");
		sb.append(getResult());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", passed=");
		sb.append(isPassed());
		sb.append(", registrationDate=");
		sb.append(getRegistrationDate());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", passedDate=");
		sb.append(getPassedDate());
		sb.append(", allowStartDate=");
		sb.append(getAllowStartDate());
		sb.append(", allowEndDate=");
		sb.append(getAllowEndDate());
		sb.append(", extraData=");
		sb.append(getExtraData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.ted.lms.model.CourseResult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>crId</column-name><column-value><![CDATA[");
		sb.append(getCrId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userModifiedId</column-name><column-value><![CDATA[");
		sb.append(getUserModifiedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userModifiedName</column-name><column-value><![CDATA[");
		sb.append(getUserModifiedName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passed</column-name><column-value><![CDATA[");
		sb.append(isPassed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationDate</column-name><column-value><![CDATA[");
		sb.append(getRegistrationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passedDate</column-name><column-value><![CDATA[");
		sb.append(getPassedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowStartDate</column-name><column-value><![CDATA[");
		sb.append(getAllowStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowEndDate</column-name><column-value><![CDATA[");
		sb.append(getAllowEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extraData</column-name><column-value><![CDATA[");
		sb.append(getExtraData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CourseResult.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CourseResult.class, ModelWrapper.class
		};
	private long _crId;
	private long _groupId;
	private long _companyId;
	private long _userModifiedId;
	private String _userModifiedName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private double _result;
	private String _comments;
	private boolean _passed;
	private Date _registrationDate;
	private Date _startDate;
	private Date _passedDate;
	private Date _allowStartDate;
	private Date _allowEndDate;
	private String _extraData;
	private long _columnBitmask;
	private CourseResult _escapedModel;
}