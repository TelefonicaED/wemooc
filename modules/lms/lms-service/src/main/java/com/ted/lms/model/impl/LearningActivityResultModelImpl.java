/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ted.lms.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.ted.lms.model.LearningActivityResult;
import com.ted.lms.model.LearningActivityResultModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the LearningActivityResult service. Represents a row in the &quot;LMS_LearningActivityResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LearningActivityResultModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningActivityResultImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LearningActivityResultImpl
 * @generated
 */
@ProviderType
public class LearningActivityResultModelImpl
	extends BaseModelImpl<LearningActivityResult>
	implements LearningActivityResultModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning activity result model instance should use the <code>LearningActivityResult</code> interface instead.
	 */
	public static final String TABLE_NAME = "LMS_LearningActivityResult";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"larId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userModifiedId", Types.BIGINT}, {"userModifiedName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"actId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"result", Types.DOUBLE}, {"comments", Types.CLOB},
		{"passed", Types.BOOLEAN}, {"startDate", Types.TIMESTAMP},
		{"endDate", Types.TIMESTAMP}, {"extraData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("larId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userModifiedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userModifiedName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("comments", Types.CLOB);
		TABLE_COLUMNS_MAP.put("passed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("extraData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LMS_LearningActivityResult (uuid_ VARCHAR(75) null,larId LONG not null primary key,groupId LONG,companyId LONG,userModifiedId LONG,userModifiedName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,actId LONG,userId LONG,result DOUBLE,comments TEXT null,passed BOOLEAN,startDate DATE null,endDate DATE null,extraData TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table LMS_LearningActivityResult";

	public static final String ORDER_BY_JPQL =
		" ORDER BY learningActivityResult.larId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LMS_LearningActivityResult.larId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACTID_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long PASSED_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long LARID_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public LearningActivityResultModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _larId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLarId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _larId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LearningActivityResult.class;
	}

	@Override
	public String getModelClassName() {
		return LearningActivityResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LearningActivityResult, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LearningActivityResult, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LearningActivityResult, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((LearningActivityResult)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LearningActivityResult, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LearningActivityResult, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LearningActivityResult)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LearningActivityResult, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LearningActivityResult, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LearningActivityResult>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LearningActivityResult.class.getClassLoader(),
			LearningActivityResult.class, ModelWrapper.class);

		try {
			Constructor<LearningActivityResult> constructor =
				(Constructor<LearningActivityResult>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<LearningActivityResult, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LearningActivityResult, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LearningActivityResult, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<LearningActivityResult, Object>>();
		Map<String, BiConsumer<LearningActivityResult, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<LearningActivityResult, ?>>();

		attributeGetterFunctions.put("uuid", LearningActivityResult::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<LearningActivityResult, String>)
				LearningActivityResult::setUuid);
		attributeGetterFunctions.put("larId", LearningActivityResult::getLarId);
		attributeSetterBiConsumers.put(
			"larId",
			(BiConsumer<LearningActivityResult, Long>)
				LearningActivityResult::setLarId);
		attributeGetterFunctions.put(
			"groupId", LearningActivityResult::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<LearningActivityResult, Long>)
				LearningActivityResult::setGroupId);
		attributeGetterFunctions.put(
			"companyId", LearningActivityResult::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<LearningActivityResult, Long>)
				LearningActivityResult::setCompanyId);
		attributeGetterFunctions.put(
			"userModifiedId", LearningActivityResult::getUserModifiedId);
		attributeSetterBiConsumers.put(
			"userModifiedId",
			(BiConsumer<LearningActivityResult, Long>)
				LearningActivityResult::setUserModifiedId);
		attributeGetterFunctions.put(
			"userModifiedName", LearningActivityResult::getUserModifiedName);
		attributeSetterBiConsumers.put(
			"userModifiedName",
			(BiConsumer<LearningActivityResult, String>)
				LearningActivityResult::setUserModifiedName);
		attributeGetterFunctions.put(
			"createDate", LearningActivityResult::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<LearningActivityResult, Date>)
				LearningActivityResult::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", LearningActivityResult::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<LearningActivityResult, Date>)
				LearningActivityResult::setModifiedDate);
		attributeGetterFunctions.put("actId", LearningActivityResult::getActId);
		attributeSetterBiConsumers.put(
			"actId",
			(BiConsumer<LearningActivityResult, Long>)
				LearningActivityResult::setActId);
		attributeGetterFunctions.put(
			"userId", LearningActivityResult::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<LearningActivityResult, Long>)
				LearningActivityResult::setUserId);
		attributeGetterFunctions.put(
			"result", LearningActivityResult::getResult);
		attributeSetterBiConsumers.put(
			"result",
			(BiConsumer<LearningActivityResult, Double>)
				LearningActivityResult::setResult);
		attributeGetterFunctions.put(
			"comments", LearningActivityResult::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<LearningActivityResult, String>)
				LearningActivityResult::setComments);
		attributeGetterFunctions.put(
			"passed", LearningActivityResult::getPassed);
		attributeSetterBiConsumers.put(
			"passed",
			(BiConsumer<LearningActivityResult, Boolean>)
				LearningActivityResult::setPassed);
		attributeGetterFunctions.put(
			"startDate", LearningActivityResult::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<LearningActivityResult, Date>)
				LearningActivityResult::setStartDate);
		attributeGetterFunctions.put(
			"endDate", LearningActivityResult::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<LearningActivityResult, Date>)
				LearningActivityResult::setEndDate);
		attributeGetterFunctions.put(
			"extraData", LearningActivityResult::getExtraData);
		attributeSetterBiConsumers.put(
			"extraData",
			(BiConsumer<LearningActivityResult, String>)
				LearningActivityResult::setExtraData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getLarId() {
		return _larId;
	}

	@Override
	public void setLarId(long larId) {
		_larId = larId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserModifiedId() {
		return _userModifiedId;
	}

	@Override
	public void setUserModifiedId(long userModifiedId) {
		_userModifiedId = userModifiedId;
	}

	@Override
	public String getUserModifiedName() {
		if (_userModifiedName == null) {
			return "";
		}
		else {
			return _userModifiedName;
		}
	}

	@Override
	public void setUserModifiedName(String userModifiedName) {
		_userModifiedName = userModifiedName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getActId() {
		return _actId;
	}

	@Override
	public void setActId(long actId) {
		_columnBitmask |= ACTID_COLUMN_BITMASK;

		if (!_setOriginalActId) {
			_setOriginalActId = true;

			_originalActId = _actId;
		}

		_actId = actId;
	}

	public long getOriginalActId() {
		return _originalActId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public double getResult() {
		return _result;
	}

	@Override
	public void setResult(double result) {
		_result = result;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public boolean getPassed() {
		return _passed;
	}

	@Override
	public boolean isPassed() {
		return _passed;
	}

	@Override
	public void setPassed(boolean passed) {
		_columnBitmask |= PASSED_COLUMN_BITMASK;

		if (!_setOriginalPassed) {
			_setOriginalPassed = true;

			_originalPassed = _passed;
		}

		_passed = passed;
	}

	public boolean getOriginalPassed() {
		return _originalPassed;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public String getExtraData() {
		if (_extraData == null) {
			return "";
		}
		else {
			return _extraData;
		}
	}

	@Override
	public void setExtraData(String extraData) {
		_extraData = extraData;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LearningActivityResult.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LearningActivityResult.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LearningActivityResult toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LearningActivityResult>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LearningActivityResultImpl learningActivityResultImpl =
			new LearningActivityResultImpl();

		learningActivityResultImpl.setUuid(getUuid());
		learningActivityResultImpl.setLarId(getLarId());
		learningActivityResultImpl.setGroupId(getGroupId());
		learningActivityResultImpl.setCompanyId(getCompanyId());
		learningActivityResultImpl.setUserModifiedId(getUserModifiedId());
		learningActivityResultImpl.setUserModifiedName(getUserModifiedName());
		learningActivityResultImpl.setCreateDate(getCreateDate());
		learningActivityResultImpl.setModifiedDate(getModifiedDate());
		learningActivityResultImpl.setActId(getActId());
		learningActivityResultImpl.setUserId(getUserId());
		learningActivityResultImpl.setResult(getResult());
		learningActivityResultImpl.setComments(getComments());
		learningActivityResultImpl.setPassed(isPassed());
		learningActivityResultImpl.setStartDate(getStartDate());
		learningActivityResultImpl.setEndDate(getEndDate());
		learningActivityResultImpl.setExtraData(getExtraData());

		learningActivityResultImpl.resetOriginalValues();

		return learningActivityResultImpl;
	}

	@Override
	public int compareTo(LearningActivityResult learningActivityResult) {
		long primaryKey = learningActivityResult.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LearningActivityResult)) {
			return false;
		}

		LearningActivityResult learningActivityResult =
			(LearningActivityResult)obj;

		long primaryKey = learningActivityResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		LearningActivityResultModelImpl learningActivityResultModelImpl = this;

		learningActivityResultModelImpl._originalUuid =
			learningActivityResultModelImpl._uuid;

		learningActivityResultModelImpl._originalGroupId =
			learningActivityResultModelImpl._groupId;

		learningActivityResultModelImpl._setOriginalGroupId = false;

		learningActivityResultModelImpl._originalCompanyId =
			learningActivityResultModelImpl._companyId;

		learningActivityResultModelImpl._setOriginalCompanyId = false;

		learningActivityResultModelImpl._setModifiedDate = false;

		learningActivityResultModelImpl._originalActId =
			learningActivityResultModelImpl._actId;

		learningActivityResultModelImpl._setOriginalActId = false;

		learningActivityResultModelImpl._originalUserId =
			learningActivityResultModelImpl._userId;

		learningActivityResultModelImpl._setOriginalUserId = false;

		learningActivityResultModelImpl._originalPassed =
			learningActivityResultModelImpl._passed;

		learningActivityResultModelImpl._setOriginalPassed = false;

		learningActivityResultModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearningActivityResult> toCacheModel() {
		LearningActivityResultCacheModel learningActivityResultCacheModel =
			new LearningActivityResultCacheModel();

		learningActivityResultCacheModel.uuid = getUuid();

		String uuid = learningActivityResultCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			learningActivityResultCacheModel.uuid = null;
		}

		learningActivityResultCacheModel.larId = getLarId();

		learningActivityResultCacheModel.groupId = getGroupId();

		learningActivityResultCacheModel.companyId = getCompanyId();

		learningActivityResultCacheModel.userModifiedId = getUserModifiedId();

		learningActivityResultCacheModel.userModifiedName =
			getUserModifiedName();

		String userModifiedName =
			learningActivityResultCacheModel.userModifiedName;

		if ((userModifiedName != null) && (userModifiedName.length() == 0)) {
			learningActivityResultCacheModel.userModifiedName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			learningActivityResultCacheModel.createDate = createDate.getTime();
		}
		else {
			learningActivityResultCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			learningActivityResultCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			learningActivityResultCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		learningActivityResultCacheModel.actId = getActId();

		learningActivityResultCacheModel.userId = getUserId();

		learningActivityResultCacheModel.result = getResult();

		learningActivityResultCacheModel.comments = getComments();

		String comments = learningActivityResultCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			learningActivityResultCacheModel.comments = null;
		}

		learningActivityResultCacheModel.passed = isPassed();

		Date startDate = getStartDate();

		if (startDate != null) {
			learningActivityResultCacheModel.startDate = startDate.getTime();
		}
		else {
			learningActivityResultCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			learningActivityResultCacheModel.endDate = endDate.getTime();
		}
		else {
			learningActivityResultCacheModel.endDate = Long.MIN_VALUE;
		}

		learningActivityResultCacheModel.extraData = getExtraData();

		String extraData = learningActivityResultCacheModel.extraData;

		if ((extraData != null) && (extraData.length() == 0)) {
			learningActivityResultCacheModel.extraData = null;
		}

		return learningActivityResultCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LearningActivityResult, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LearningActivityResult, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LearningActivityResult, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((LearningActivityResult)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LearningActivityResult, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LearningActivityResult, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LearningActivityResult, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((LearningActivityResult)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LearningActivityResult>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _larId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userModifiedId;
	private String _userModifiedName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _actId;
	private long _originalActId;
	private boolean _setOriginalActId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private double _result;
	private String _comments;
	private boolean _passed;
	private boolean _originalPassed;
	private boolean _setOriginalPassed;
	private Date _startDate;
	private Date _endDate;
	private String _extraData;
	private long _columnBitmask;
	private LearningActivityResult _escapedModel;

}